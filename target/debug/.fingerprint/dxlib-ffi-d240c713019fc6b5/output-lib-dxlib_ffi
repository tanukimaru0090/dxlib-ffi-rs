{"$message_type":"diagnostic","message":"unused import: `std::ffi::CStr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":123,"byte_end":137,"line_start":5,"line_end":5,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use std::ffi::CStr;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":119,"byte_end":140,"line_start":5,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::ffi::CStr;","highlight_start":1,"highlight_end":20},{"text":"use std::ffi::CString;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::ffi::CStr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::ffi::CStr;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::ffi::CString`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":144,"byte_end":161,"line_start":6,"line_end":6,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use std::ffi::CString;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":140,"byte_end":164,"line_start":6,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::ffi::CString;","highlight_start":1,"highlight_end":23},{"text":"use std::os::raw::c_void;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::ffi::CString`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::ffi::CString;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the item `c_void` is imported redundantly","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":195,"byte_end":210,"line_start":8,"line_end":8,"column_start":5,"column_end":20,"is_primary":false,"text":[{"text":"use std::os::raw::*;","highlight_start":5,"highlight_end":20}],"label":"the item `c_void` is already imported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":168,"byte_end":188,"line_start":7,"line_end":7,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use std::os::raw::c_void;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the item `c_void` is imported redundantly\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::os::raw::c_void;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::os::raw::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthe item `c_void` is already imported here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::os::raw::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":195,"byte_end":210,"line_start":8,"line_end":8,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use std::os::raw::*;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":191,"byte_end":213,"line_start":8,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::os::raw::*;","highlight_start":1,"highlight_end":21},{"text":"use std::vec::Vec;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::os::raw::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::os::raw::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::vec::Vec`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":217,"byte_end":230,"line_start":9,"line_end":9,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use std::vec::Vec;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":213,"byte_end":233,"line_start":9,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::vec::Vec;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::vec::Vec`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::vec::Vec;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused doc comment","code":{"code":"unused_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":381,"byte_end":63157,"line_start":15,"line_end":1330,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"extern \"stdcall\" {","highlight_start":1,"highlight_end":19},{"text":"    // 使用必須関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ライブラリの初期化","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DxLib_Init() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// ライブラリ使用の終了関数","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DxLib_End() -> CInt;","highlight_start":1,"highlight_end":35},{"text":"    /// ウインドウズのメッセージを処理する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_ProcessMessage() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウインドウサイズ(クライアント領域)を設定する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_SetWindowSize(width:CInt,height:CInt)->CInt;","highlight_start":1,"highlight_end":59},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    // Live2D 関係関数","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_Live2D_SetCubism4CoreDLLPath(CoreDLLFilePath: *const CChar) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    pub fn dx_Live2D_RenderBegin() -> CInt;","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_Live2D_RenderEnd() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    pub fn dx_Live2D_LoadModel(FilePath: *const CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"    pub fn dx_Live2D_DeleteModel(Live2DModelHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_Live2D_Model_Update(Live2DModelHandle: CInt, DeltaTimeSeconds: CFloat) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    pub fn dx_Live2D_Model_Draw(Live2DModelHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    pub fn dx_Live2D_Model_SetTranslate(Live2DModelHandle: CInt, x: CFloat, y: CFloat) -> CInt;","highlight_start":1,"highlight_end":96},{"text":"    pub fn dx_Live2D_Model_SetExtendRate(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: CInt,","highlight_start":1,"highlight_end":33},{"text":"        ExRateX: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        ExRateY: CFloat,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_Live2D_Model_SetRotate(Live2DModelHandle: CInt, RotAngle: CFloat) -> CInt;","highlight_start":1,"highlight_end":89},{"text":"    pub fn dx_Live2D_Model_StartMotion(","highlight_start":1,"highlight_end":40},{"text":"        Live2DModelHandle: CInt,","highlight_start":1,"highlight_end":33},{"text":"        group: *const CChar,","highlight_start":1,"highlight_end":29},{"text":"        no: CInt,","highlight_start":1,"highlight_end":18},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_Live2D_Model_IsMotionFinished(Live2DModelHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    pub fn dx_Live2D_Model_SetExpression(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: CInt,","highlight_start":1,"highlight_end":33},{"text":"        expressionID: *const CChar,","highlight_start":1,"highlight_end":36},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ３Ｄ関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //３Ｄ図形描画関係関数","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_DrawLine3D(Pos1: VECTOR, Pos2: VECTOR, Color: Color) -> CInt;","highlight_start":1,"highlight_end":76},{"text":"    pub fn dx_DrawTriangle3D(","highlight_start":1,"highlight_end":30},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos3: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawSphere3D(","highlight_start":1,"highlight_end":28},{"text":"        CenterPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        DivNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCapsule3D(","highlight_start":1,"highlight_end":29},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        DivNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCone3D(","highlight_start":1,"highlight_end":26},{"text":"        TopPos: VECTOR,","highlight_start":1,"highlight_end":24},{"text":"        BottomPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        DivNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawBillboard3D(","highlight_start":1,"highlight_end":31},{"text":"        Pos: VECTOR,","highlight_start":1,"highlight_end":21},{"text":"        cx: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        cy: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        Size: CFloat,","highlight_start":1,"highlight_end":22},{"text":"        Angle: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPolygonIndexed3D(","highlight_start":1,"highlight_end":36},{"text":"        Vertex: *mut VERTEX3D,","highlight_start":1,"highlight_end":31},{"text":"        VertexNum: CInt,","highlight_start":1,"highlight_end":25},{"text":"        Indices: *mut u16,","highlight_start":1,"highlight_end":27},{"text":"        PolygonNum: CInt,","highlight_start":1,"highlight_end":26},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPolygon3D(","highlight_start":1,"highlight_end":29},{"text":"        Vertex: *mut VERTEX3D,","highlight_start":1,"highlight_end":31},{"text":"        PolygonNum: CInt,","highlight_start":1,"highlight_end":26},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMaterialUseVertDifColor(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    pub fn dx_SetMaterialUseVertSpcColor(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    pub fn dx_SetMaterialParam(Material: MATERIALPARAM) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Zバッファを使うかどうかのフラグ","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetUseZBuffer3D(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    // Zバッファへの書き込みするかどうかのフラグ","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetWriteZBuffer3D(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_SetUseBackCulling(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_SetTextureAddressModeUV(ModeU: CInt, ModeV: CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_SetFogEnable(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_SetFogColor(Red: CInt, Green: CInt, Blue: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    pub fn dx_SetFogStartEnd(start: CFloat, end: CFloat) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    pub fn dx_GetColorF(Red: CFloat, Green: CFloat, Blue: CFloat, Alpha: CFloat) -> COLOR_F;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_GetColorU8(Red: CInt, Green: CInt, Blue: CInt, Alpha: CInt) -> COLOR_U8;","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // カメラ関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_SetCameraPositionAndTarget_UpVecY(Position: VECTOR, Target: VECTOR) -> CInt;","highlight_start":1,"highlight_end":91},{"text":"    pub fn dx_SetCameraNearFar(Near: CFloat, Far: CFloat) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_SetCameraPositionAndTargetAndUpVec(","highlight_start":1,"highlight_end":50},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Target: VECTOR,","highlight_start":1,"highlight_end":24},{"text":"        Up: VECTOR,","highlight_start":1,"highlight_end":20},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_SetCameraPositionAndAngle(","highlight_start":1,"highlight_end":41},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        VRotate: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        HRotate: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        TRotate: CFloat,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_SetCameraViewMatrix(ViewMatrix: MATRIX) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_SetupCamera_Perspective(Fov: CFloat) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_SetupCamera_Ortho(Size: CFloat) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_SetupCamera_ProjectionMatrix(ProjectionMatrix: MATRIX) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    pub fn dx_SetCameraDotAspect(DotAspect: CFloat) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_ConvWorldPosToScreenPos(WorldPos: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_ConvScreenPosToWorldPos(ScreenPos: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":68},{"text":"    pub fn dx_SetCameraScreenCenter(x: CFloat, y: CFloat) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_CheckCameraViewClip(CheckPos: VECTOR) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_CheckCameraViewClip_Box(BoxPos1: VECTOR, BoxPos2: VECTOR) -> CInt;","highlight_start":1,"highlight_end":81},{"text":"    pub fn dx_GetCameraViewMatrix() -> MATRIX;","highlight_start":1,"highlight_end":47},{"text":"    pub fn dx_GetCameraProjectionMatrix() -> MATRIX;","highlight_start":1,"highlight_end":53},{"text":"    // ライト関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_SetUseLighting(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_SetGlobalAmbientLight(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //標準ライト関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_ChangeLightTypeDir(Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_ChangeLightTypePoint(","highlight_start":1,"highlight_end":36},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_ChangeLightTypeSpot(","highlight_start":1,"highlight_end":35},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Direction: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        OutAngle: CFloat,","highlight_start":1,"highlight_end":26},{"text":"        InAngle: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_SetLightEnable(EnableFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_SetLightDifColor(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightSpcColor(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_SetLightAmbColor(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_SetLightDirection(Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_SetLightPosition(Position: VECTOR) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_SetLightRangeAtten(","highlight_start":1,"highlight_end":34},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightAngle(OutAngle: CFloat, InAngle: CFloat) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightType() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightEnable() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_GetLightDifColor() -> COLOR_F;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightSpcColor() -> COLOR_F;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightAmbColor() -> COLOR_F;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightDirection() -> VECTOR;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightPosition() -> VECTOR;","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_GetLightRangeAtten(","highlight_start":1,"highlight_end":34},{"text":"        Range: *mut CFloat,","highlight_start":1,"highlight_end":28},{"text":"        Atten0: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten1: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten2: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_GetLightAngle(OutAngle: *mut CFloat, InAngle: *mut CFloat) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //ライトハンドル関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CreateDirLightHandle(Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CreatePointLightHandle(","highlight_start":1,"highlight_end":38},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CreateSpotLightHandle(","highlight_start":1,"highlight_end":37},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Direction: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        OutAngle: CFloat,","highlight_start":1,"highlight_end":26},{"text":"        InAngle: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DeleteLightHandle(LHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteLightHandleAll() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetLightTypeHandle(LHandle: CInt, LightType: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    pub fn dx_SetLightEnableHandle(LHandle: CInt, EnableFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightDifColorHandle(LHandle: CInt, Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightSpcColorHandle(LHandle: CInt, Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightAmbColorHandle(LHandle: CInt, Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightDirectionHandle(LHandle: CInt, Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightPositionHandle(LHandle: CInt, Position: VECTOR) -> CInt;","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightRangeAttenHandle(","highlight_start":1,"highlight_end":40},{"text":"        LHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightAngleHandle(LHandle: CInt, OutAngle: CFloat, InAngle: CFloat) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_GetLightTypeHandle(LHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightEnableHandle(LHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_GetLightDifColorHandle(LHandle: CInt) -> COLOR_F;","highlight_start":1,"highlight_end":64},{"text":"    pub fn dx_GetLightSpcColorHandle(LHandle: CInt) -> COLOR_F;","highlight_start":1,"highlight_end":64},{"text":"    pub fn dx_GetLightAmbColorHandle(LHandle: CInt) -> COLOR_F;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightDirectionHandle(LHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightPositionHandle(LHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightRangeAttenHandle(","highlight_start":1,"highlight_end":40},{"text":"        LHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        Range: *mut CFloat,","highlight_start":1,"highlight_end":28},{"text":"        Atten0: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten1: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten2: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightAngleHandle(","highlight_start":1,"highlight_end":35},{"text":"        LHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        OutAngle: *mut CFloat,","highlight_start":1,"highlight_end":31},{"text":"        InAngle: *mut CFloat,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetEnableLightHandleNum() -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_GetEnableLightHandle(Index: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //算術演算関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_VGet(x: CFloat, y: CFloat, z: CFloat) -> VECTOR;","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_VAdd(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VSub(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VDot(In1: VECTOR, In2: VECTOR) -> CFloat;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VCross(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_VScale(In: VECTOR, Scale: CFloat) -> VECTOR;","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_VSize(In: VECTOR) -> CFloat;","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_VSquareSize(In: VECTOR) -> CFloat;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_VNorm(In: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_VTransform(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":62},{"text":"    pub fn dx_VTransformSR(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetIdent() -> MATRIX;","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_MGetScale(Scale: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_MGetTranslate(Trans: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_MGetRotX(XAxisRotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotY(YAxisRotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_MGetRotZ(ZAxisRotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotAxis(RotateAxis: VECTOR, Rotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_MGetRotVec2(In1: VECTOR, In2: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis1(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis2(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_MAdd(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_MMult(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_MScale(InM: MATRIX, Scale: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_MTranspose(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_MInverse(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 衝突検出系関数","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_Segment_Segment_MinLength(","highlight_start":1,"highlight_end":41},{"text":"        SegmentAPos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        SegmentAPos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        SegmentBPos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        SegmentBPos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CFloat;","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_Segment_Triangle_MinLength(","highlight_start":1,"highlight_end":42},{"text":"        SegmentPos1: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        SegmentPos2: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        TrianglePos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos3: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CFloat;","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_Segment_Point_MinLength(","highlight_start":1,"highlight_end":39},{"text":"        SegmentPos1: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        SegmentPos2: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        PointPos: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"    ) -> CFloat;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_HitCheck_Line_Triangle(","highlight_start":1,"highlight_end":38},{"text":"        LinePos1: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        LinePos2: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        TrianglePos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos3: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"    ) -> HITRESULT_LINE;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ３Ｄモデル関係の関数","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの読み込み・複製関係の関数","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの読み込み","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_MV1LoadModel(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    pub fn dx_MV1DuplicateModel(SrcMHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_MV1DeleteModel(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_MV1SetLoadModelUsePhysicsMode(PhysicsMode: CInt) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    pub fn dx_MV1SetLoadModelPhysicsWorldGravity(Gravity: CFloat) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデル描画関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_MV1DrawModel(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_MV1DrawFrame(MHandle: CInt, FrameIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":69},{"text":"    pub fn dx_MV1DrawMesh(MHandle: CInt, MeshIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_MV1DrawTriangleList(MHandle: CInt, TriangleListIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデル描画設定関数","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1SetUseOrigShader(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデル基本制御関数","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの位置の指定","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1SetPosition(MHandle: CInt, Position: VECTOR) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1GetPosition(MHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_MV1SetScale(MHandle: CInt, Scale: VECTOR) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1GetScale(MHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1SetRotationXYZ(MHandle: CInt, Rotate: VECTOR) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    pub fn dx_MV1GetRotationXYZ(MHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_MV1SetRotationZYAxis(","highlight_start":1,"highlight_end":36},{"text":"        MHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        ZAxis: VECTOR,","highlight_start":1,"highlight_end":23},{"text":"        YAxis: VECTOR,","highlight_start":1,"highlight_end":23},{"text":"        ZTwist: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_MV1SetMatrix(MHandle: CInt, Matrix: MATRIX) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_MV1GetMatrix(MHandle: CInt) -> MATRIX;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_MV1SetVisible(MHandle: CInt, VisibleFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    pub fn dx_MV1GetVisible(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_MV1SetDifColorScale(MHandle: CInt, Scale: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1SetUseVertDifColor(MHandle: CInt, UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    pub fn dx_MV1SetUseVertSpcColor(MHandle: CInt, UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    pub fn dx_MV1PhysicsCalculation(MHandle: CInt, MillisecondTime: CFloat) -> CInt;","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // アニメーション関数","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1AttachAnim(","highlight_start":1,"highlight_end":29},{"text":"        MHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        AnimIndex: CInt,","highlight_start":1,"highlight_end":25},{"text":"        AnimSrcMHandle: CInt,","highlight_start":1,"highlight_end":30},{"text":"        NameCheck: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_MV1GetAnimNum(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_MV1DetachAnim(MHandle: CInt, AttachIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    pub fn dx_MV1SetAttachAnimTime(MHandle: CInt, AttachIndex: CInt, Time: CFloat) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_MV1GetAttachAnimTotalTime(MHandle: CInt, AttachIndex: CInt) -> CFloat;","highlight_start":1,"highlight_end":85},{"text":"    pub fn dx_MV1GetAttachAnimTime(MHandle: CInt, AttachIndex: CInt) -> CFloat;","highlight_start":1,"highlight_end":80},{"text":"    pub fn dx_MV1SetAttachAnimBlendRate(MHandle: CInt, AttachIndex: CInt, Rate: CFloat) -> CInt;","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // シェイプ関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1SetShapeRate(MHandle: CInt, ShapeIndex: CInt, Rate: CFloat) -> CInt;","highlight_start":1,"highlight_end":86},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 図形描画関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 線を描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawLine(x1: CInt, y1: CInt, x2: CInt, y2: CInt, color: Color) -> CInt;","highlight_start":1,"highlight_end":86},{"text":"    /// 線を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawLineAA(x1: CFloat, y1: CFloat, x2: CFloat, y2: CFloat, color: Color) -> CInt;","highlight_start":1,"highlight_end":96},{"text":"    /// 四角を描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawBox(","highlight_start":1,"highlight_end":23},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 四角を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawBoxAA(","highlight_start":1,"highlight_end":25},{"text":"        x1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        x2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 円の描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawCircle(x: CInt, y: CInt, r: CInt, color: Color, fill_flag: CInt) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    /// 円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawCircleAA(","highlight_start":1,"highlight_end":28},{"text":"        x: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        y: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        pos_num: CInt,","highlight_start":1,"highlight_end":23},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 楕円の描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawOval(x: CInt, y: CInt, rx: CInt, ry: CInt, Color: Color, FillFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":100},{"text":"    /// 楕円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawOvalAA(","highlight_start":1,"highlight_end":26},{"text":"        x: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        y: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        rx: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        ry: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        posnum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 三角形の描画","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawTriangle(","highlight_start":1,"highlight_end":28},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 三角形の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawTriangleAA(","highlight_start":1,"highlight_end":30},{"text":"        x1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        x2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        x3: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y3: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 点を描画する","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPixel(x: CInt, y: CInt, Color: Color) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// 指定点の色を取得","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_GetPixel(x: CInt, y: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // グラフィックデータ制御関数","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画像ファイルを読みこんで画面に表示する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_LoadGraphScreen() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// 画像ファイルのメモリへの読みこみ、及び動画ファイルのロード","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadGraph() -> CInt;","highlight_start":1,"highlight_end":37},{"text":"    /// 画像ファイルのメモリへの分割読みこみ","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadDivGraph(FileName:*const CChar,AllNum:CInt,XNum:CInt,YNum:CInt,XSize:CInt,YSize:CInt,HandleBuf:*mut CInt) -> CInt;","highlight_start":1,"highlight_end":135},{"text":"    /// 空のグラフィックを作成する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeGraph(SizeX: CInt, SizeY: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// 描画対象にできるグラフィックを作成する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_MakeScreen(SizeX: CInt, SizeY: CInt, UseAlphaChannel: CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    /// 描画対象にできるグラフィックのマルチサンプリング設定を行う","highlight_start":1,"highlight_end":38},{"text":"    pub fn dx_SetCreateDrawValidGraphMultiSample(Samples: CInt, Quality: CInt) -> CInt;","highlight_start":1,"highlight_end":88},{"text":"    /// 作成するグラフィックのビット深度を設定する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetCreateGraphColorBitDepth(BitDepth: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// 描画可能な浮動小数点型のグラフィックを作成するかどうかの設定を行う","highlight_start":1,"highlight_end":42},{"text":"    pub fn dx_SetDrawValidFloatTypeGraphCreateFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    /// 作成する描画可能なグラフィックのチャンネル数の設定を行う","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetCreateDrawValidGraphChannelNum(ChannelNum: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    /// 読み込み時に画像を乗算済みα画像に変換するかを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetUsePremulAlphaConvertLoad(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// メモリに読みこんだグラフィックの描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawGraph(x: CInt, y: CInt, GrHandle: CInt, TransFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":84},{"text":"    // メモリに読み込んだグラフィックの描画　(float版)","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_DrawGraphF(x: CFloat, y: CFloat, GrHandle: CInt, TransFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":89},{"text":"    /// メモリに読みこんだグラフィックのＬＲ反転描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawTurnGraph(","highlight_start":1,"highlight_end":29},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの拡大縮小描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawExtendGraph(","highlight_start":1,"highlight_end":31},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの回転描画","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawRotaGraph(","highlight_start":1,"highlight_end":29},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        ex_rate: f64,","highlight_start":1,"highlight_end":22},{"text":"        angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        gr_handle: CInt,","highlight_start":1,"highlight_end":25},{"text":"        trans_flag: CInt,","highlight_start":1,"highlight_end":26},{"text":"        turn_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり)","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_DrawRotaGraph2(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        cx: CInt,","highlight_start":1,"highlight_end":18},{"text":"        cy: CInt,","highlight_start":1,"highlight_end":18},{"text":"        ExtRate: f64,","highlight_start":1,"highlight_end":22},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        TurnFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり、縦横拡大率別指定)","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_DrawRotaGraph3(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        cx: CInt,","highlight_start":1,"highlight_end":18},{"text":"        cy: CInt,","highlight_start":1,"highlight_end":18},{"text":"        ExtRateX: f64,","highlight_start":1,"highlight_end":23},{"text":"        ExtRateY: f64,","highlight_start":1,"highlight_end":23},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        TurnFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの自由変形描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawModiGraph(","highlight_start":1,"highlight_end":29},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x4: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y4: CInt,","highlight_start":1,"highlight_end":18},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// グラフィックの指定矩形部分のみを描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawRectGraph(","highlight_start":1,"highlight_end":29},{"text":"        DestX: CInt,","highlight_start":1,"highlight_end":21},{"text":"        DestY: CInt,","highlight_start":1,"highlight_end":21},{"text":"        SrcX: CInt,","highlight_start":1,"highlight_end":20},{"text":"        SrcY: CInt,","highlight_start":1,"highlight_end":20},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        GraphHandle: CInt,","highlight_start":1,"highlight_end":27},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        TurnFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 指定のグラフィックの指定部分だけを抜き出して新たなグラフィックを作成する","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_DerivationGraph(","highlight_start":1,"highlight_end":31},{"text":"        SrcX: CInt,","highlight_start":1,"highlight_end":20},{"text":"        SrcY: CInt,","highlight_start":1,"highlight_end":20},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        SrcGraphHandle: CInt,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 描画先に設定されているグラフィック領域から指定領域のグラフィックを読みこむ","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_GetDrawScreenGraph(x1: CInt, y1: CInt, x2: CInt, y2: CInt, GrHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":98},{"text":"    /// グラフィックのサイズを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetGraphSize() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// 読みこんだグラフィックデータをすべて削除する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_InitGraph() -> CInt;","highlight_start":1,"highlight_end":35},{"text":"    /// 指定のグラフィックをメモリ上から削除する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DeleteGraph(GrHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// 描画モードをセットする","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetDrawMode(DrawMode: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// 描画の際のブレンドモードをセットする","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_SetDrawBlendMode(blend_mode: CInt, pal: CInt) -> CInt;","highlight_start":1,"highlight_end":69},{"text":"    /// 描画輝度をセット","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetDrawBright(RedBright: CInt, GreenBright: CInt, BlueBright: CInt) -> CInt;","highlight_start":1,"highlight_end":91},{"text":"    /// グラフィックに設定する透過色をセットする","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetTransColor(Red: CInt, Green: CInt, Blue: CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    // 画像ファイルからブレンド画像を読み込む","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadBlendGraph() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// ブレンド画像と通常画像を合成して描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawBlendGraph(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        BlendGraph: CInt,","highlight_start":1,"highlight_end":26},{"text":"        BorderParam: CInt,","highlight_start":1,"highlight_end":27},{"text":"        BorderRange: CInt,","highlight_start":1,"highlight_end":27},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 画像にフィルター処理を施す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GraphFilter() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// 画像にフィルター処理を施す( 出力先画像指定版 )","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GraphFilterBlt() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// 画像にフィルター処理を施す( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GraphFilterRectBlt() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// 二つの画像を特殊効果付きでブレンドする","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GraphBlend() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像指定版 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_GraphBlendBlt() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_GraphBlendRectBlt() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字描画関係関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列を描画する","highlight_start":1,"highlight_end":17},{"text":"    //  pub fn dx_DrawString(x: CInt, y: CInt, string: *const CChar, color: Color) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    /// 書式付き文字列を描画する","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_DrawFormatString(x:CInt,y:CInt,color:Color,format:*const CChar, ...) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    /// DrawString で描画される文字列の幅(ドット単位)を得る","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetDrawStringWidth() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// DrawFormatString 関数書式付き文字列の描画幅(ドット単位)を得る","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_GetDrawFormatStringWidth() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// 描画する文字列のサイズをセットする","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetFontSize(size: CInt) -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// 描画する文字列の文字の太さをセットする","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetFontThickness(TinckPal: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// 描画するフォントを変更する","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_ChangeFont(name: *const CChar) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// 文字列描画に使用するフォントのタイプを変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_ChangeFontType(FontType: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// 新しいフォントデータを作成","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_CreateFontToHandle(FontName: *const CChar,Size: CInt,Thick: CInt,FontType: CInt) -> CInt;","highlight_start":1,"highlight_end":106},{"text":"    /// ＤＸフォントデータファイルを読み込む","highlight_start":1,"highlight_end":27},{"text":"    // pub fn dx_LoadFontDataToHandle(FileName: *const CChar, EdgeSize: CInt) -> CInt;","highlight_start":1,"highlight_end":87},{"text":"    /// フォントデータを削除する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DeleteFontToHandle(FontHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 作成するフォントデータを『乗算済みα』用にするかどうかを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetFontCacheUsePremulAlphaFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    /// 指定のフォントデータで文字列を描画する","highlight_start":1,"highlight_end":28},{"text":"    // pub fn dx_DrawStringToHandle(x: CInt,y: CInt,String: *const CChar,Color: Color,FontHandle: CInt,) -> CInt;","highlight_start":1,"highlight_end":114},{"text":"    /// 指定のフォントデータで書式付き文字列を描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawFormatStringToHandle() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// 指定のフォントデータで描画する文字列の幅を得る","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_GetDrawStringWidthToHandle(String:*const CChar,StrLen:CInt, FontHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":102},{"text":"    /// 指定のフォントデータで書式付き文字列の描画幅を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetDrawFormatStringWidthToHandle() -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 指定のフォントデータの情報を得る","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_GetFontStateToHandle(FontName:*const CChar,Size:*mut CInt,Thick:*mut CInt,FontHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":116},{"text":"    /// フォントデータを全て初期化する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_InitFontToHandle() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 簡易画面出力関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub fn dx_() -> CInt;","highlight_start":1,"highlight_end":28},{"text":"    // 簡易文字列描画","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub unsafe fn  dx_printfDx(arg: T, arg2: U, mut args: ...) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// 簡易画面出力履歴をクリアする","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_clsDx() -> CInt;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // その他画面操作系関数","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画面モードの変更","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetGraphMode(SizeX: CInt, SizeY: CInt, ColorBitNum: CInt, RefreshRate: CInt) -> CInt;","highlight_start":1,"highlight_end":100},{"text":"    /// フルスクリーンモード時の解像度モードを設定する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SetFullScreenResolutionMode(ResolutionMode: CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    /// フルスクリーンモード時の画面拡大モードを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFullScreenScalingMode(ScalingMode: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// 現在の画面の大きさとカラービット数を得る","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_GetScreenState(SizeX:*mut CInt,SizeY:*mut CInt,ColorBitDepth:*mut CInt) -> CInt;","highlight_start":1,"highlight_end":97},{"text":"    /// 描画可能領域のセット","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_SetDrawArea(x1: CInt, y1: CInt, x2: CInt, y2: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    /// 画面に描かれたものを消去する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_ClearDrawScreen() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// 画面の背景色を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetBackgroundColor(Red: CInt, Green: CInt, Blue: CInt) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    /// 色コードを取得する","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_GetColor(Red: CInt, Green: CInt, Blue: CInt) -> Color;","highlight_start":1,"highlight_end":69},{"text":"    /// 描画先グラフィック領域の指定","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetDrawScreen(DrawScreen: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// フリップ関数、画面の裏ページ(普段は表示されていない)の内容を表ページ(普段表示されている)に反映する","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_ScreenFlip() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// 画面のフルスクリーンアンチエイリアスモードの設定をする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetFullSceneAntiAliasingMode(Samples: CInt, Quality: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 動画関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 動画ファイルの再生","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_PlayMovie(FileName:*const CChar,ExRate:CInt,PlayType:CInt) -> CInt;","highlight_start":1,"highlight_end":84},{"text":"    /// ムービーグラフィックの動画の再生を開始する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_PlayMovieToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// ムービーグラフィックの動画再生を一時停止する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_PauseMovieToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// ムービーグラフィックの動画の再生位置を変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SeekMovieToGraph(GraphHandle: CInt, Time: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    /// ムービーグラフィックの動画の再生位置を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_TellMovieToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// ムービーグラフィックの動画の再生状態を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_GetMovieStateToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マスク関係関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マスク画面を作成する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_CreateMaskScreen() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// マスク画面を削除する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteMaskScreen() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から構築する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_LoadMask(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から分割構築する","highlight_start":1,"highlight_end":44},{"text":"    //pub fn dx_LoadDivMask() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// マスクデータをマスク画面に描画する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_DrawMask(x: CInt, y: CInt, MaskHandle: CInt, TransMode: CInt) -> CInt;","highlight_start":1,"highlight_end":85},{"text":"    /// 指定のマスク画面領域を指定のマスクデータをタイル上に並べて埋める","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMask(x1: CInt, y1: CInt, x2: CInt, y2: CInt, MaskHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    /// マスクデータを削除","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DeleteMask(MaskHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// マスクデータを初期化する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_InitMask() -> CInt;","highlight_start":1,"highlight_end":34},{"text":"    /// マスク画面を指定の色で塗りつぶす","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_FillMaskScreen(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// マスク画面の有効の有無を変更","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetUseMaskScreenFlag(ValidFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    /// 空のマスクデータの作成","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_MakeMask(Width: CInt, Height: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// マスクデータの大きさを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetMaskSize(WidthBuf:*mut CInt,HeightBuf:*mut CInt,MaskHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    /// マスクのデータをマスクデータ領域に転送する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetDataToMask(","highlight_start":1,"highlight_end":29},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        MaskHandle: CInt,","highlight_start":1,"highlight_end":26},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// マスクのデータをマスク画面に直接描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawMaskToDirectData(","highlight_start":1,"highlight_end":36},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        TransMode: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// マスクのデータをタイル上に並べた形で直接マスク画面全体に描画する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMaskToDirectData(","highlight_start":1,"highlight_end":40},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 入力関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ジョイパッドが接続されている数を取得する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetJoypadNum() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// ジョイパッドの入力状態を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetJoypadInputState(InputType: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// ジョイパッドのアナログ的なレバー入力情報を得る","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_GetJoypadAnalogInput(XBuf: *mut CInt, YBuf: *mut CInt, InputType: CInt) -> CInt;","highlight_start":1,"highlight_end":95},{"text":"    /// ジョイパッドのDirectInputから取得できる情報を得る","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GetJoypadDirectInputState() -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    /// ジョイパッドのXInputから取得できる情報を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetJoypadXInputState() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// ジョイパッドの方向入力の無効範囲を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetJoypadDeadZone() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// ジョイパッドの振動を開始する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_StartJoypadVibration(","highlight_start":1,"highlight_end":36},{"text":"        InputType: CInt,","highlight_start":1,"highlight_end":25},{"text":"        Power: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Time: CInt,","highlight_start":1,"highlight_end":20},{"text":"        EffectIndex: CInt,","highlight_start":1,"highlight_end":27},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// ジョイパッドの振動を停止する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_StopJoypadVibration() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マウスカーソルの表示設定フラグのセット","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetMouseDispFlag(DispFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// マウスカーソルの位置を取得する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_GetMousePoint(XBuf: *mut CInt, YBuf: *mut CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    /// マウスカーソルの位置をセットする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetMousePoint(PointX: CInt, PointY: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// マウスのボタンの状態を得る","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_GetMouseInput() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// マウスのボタンが押されたり離されたりした履歴を取得する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_GetMouseInputLog2(Button:*mut CInt,ClickX:*mut CInt,ClickY:*mut CInt,LogType:*mut CInt, LogDelete:CInt ) -> CInt;","highlight_start":1,"highlight_end":130},{"text":"    /// マウスホイールの回転量を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetMouseWheelRotVol() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// タッチされている箇所の数を取得する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_GetTouchInputNum() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// タッチされている箇所の情報を取得する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_GetTouchInput(InputNo:CInt,PositionX:*mut CInt,PositionY:*mut CInt,ID:*mut CInt,Device:*mut CInt) -> CInt;","highlight_start":1,"highlight_end":123},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// すべてのキーの押下状態を取得","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckHitKeyAll(check_type: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// 特定キーの入力状態を得る","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_CheckHitKey(key_code: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// キーボードのすべてのキーの押下状態を取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetHitKeyStateAll(key_state_buf: *mut CChar) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetInputChar(DeleteFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する、バッファになにも文字コードがない場合はキーが押されるまで待つ","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_GetInputCharWait(DeleteFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// 文字入力バッファをクリアする","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_ClearInputCharBuf() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// キーボードによる文字列の入力","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_KeyInputString(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        CharMaxLength: CInt,","highlight_start":1,"highlight_end":29},{"text":"        StrBuffer: *mut CChar,","highlight_start":1,"highlight_end":31},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// キーボードによる半角文字列のみの入力","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_KeyInputSingleCharString(","highlight_start":1,"highlight_end":40},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        CharMaxLength: CInt,","highlight_start":1,"highlight_end":29},{"text":"        StrBuffer: *mut CChar,","highlight_start":1,"highlight_end":31},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// キーボードによる数値の入力","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_KeyInputNumber(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        MaxNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MinNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// KeysnputString系 関数使用時の文字の各色を変更する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetKeyInputStringColor(","highlight_start":1,"highlight_end":38},{"text":"        NmlStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        NmlCur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrBack: u32,","highlight_start":1,"highlight_end":25},{"text":"        IMECur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMELine: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStr: u32,","highlight_start":1,"highlight_end":27},{"text":"        IMEModeStr: u32,","highlight_start":1,"highlight_end":25},{"text":"        NmlStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStrE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMEModeStrE: u32,","highlight_start":1,"highlight_end":26},{"text":"        IMESelectWinE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMESelectWinF: u32,","highlight_start":1,"highlight_end":28},{"text":"        SelectStrBackColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        SelectStrColor: u32,","highlight_start":1,"highlight_end":29},{"text":"        SelectStrEdgeColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        IMEStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 新しいキー入力データの作成","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeKeyInput(","highlight_start":1,"highlight_end":28},{"text":"        MaxStrLength: CInt,","highlight_start":1,"highlight_end":28},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"        SingleCharOnlyFlag: CInt,","highlight_start":1,"highlight_end":34},{"text":"        NumCharOnlyFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// キー入力データの削除","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteKeyInput(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"    /// すべてのキー入力データの削除","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_InitKeyInput() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// 指定のキー入力をアクティブにする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetActiveKeyInput(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 入力が終了しているか取得する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckKeyInput(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// キー入力中データの描画","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_DrawKeyInputString(x: CInt, y: CInt, InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":79},{"text":"    /// 入力モード文字列を描画する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_DrawKeyInputModeString(x: CInt, y: CInt) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"    /// キー入力データに指定の文字列をセットする","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_SetKeyInputString() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// キー入力データに指定の数値を文字に置き換えてセットする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetKeyInputNumber(Number: CInt, InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// 入力データの文字列を取得する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_GetKeyInputString() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// 入力データの文字列を数値として取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetKeyInputNumber(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音利用関数","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 音ファイルを再生する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_PlaySoundFile(FileName:&str,PlayType:CInt) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    /// 音ファイルが再生中か調べる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_CheckSoundFile() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// 音ファイルの再生を止める","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_StopSoundFile() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// 音ファイルをメモリに読みこむ","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_LoadSoundMem() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// メモリに読みこんだ音データを再生する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_PlaySoundMem(SoundHandle: CInt, PlayType: CInt, TopPositionFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    /// メモリに読みこんだ音データが再生中か調べる","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_CheckSoundMem(SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// メモリに読み込んだ音データの再生を止める","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_StopSoundMem(SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// メモリに読みこんだ音データを削除する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DeleteSoundMem(SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"    /// メモリに読みこんだ音データをすべて消去する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_InitSoundMem() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// メモリに読みこんだ音データの再生にパンを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_ChangePanSoundMem(PanPal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// メモリに読みこんだ音データの再生にボリュームを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_ChangeVolumeSoundMem(VolumePal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":80},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するパンを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_ChangeNextPlayPanSoundMem(PanPal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するボリュームを設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_ChangeNextPlayVolumeSoundMem(VolumePal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":88},{"text":"    /// メモリに読み込んだ音データの再生周波数を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFrequencySoundMem(FrequencyPal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetLoopPosSoundMem(LoopTime: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する(サンプル位置指定)","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_SetLoopSamplePosSoundMem(LoopSamplePosition: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    /// メモリに読み込んだ音データの再生位置をサンプル単位で変更する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetCurrentPositionSoundMem(SamplePosition: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":91},{"text":"    /// 既にメモリに読み込んである音データを使用するサウンドハンドルを新たに作成する( 非ストリームサウンドのみ )","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_DuplicateSoundMem(SrcSoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"    /// 作成するメモリに読み込んだ音データのピッチ( 音の長さを変えずに音程を変更する )レートを設定する","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_SetCreateSoundPitchRate(Cents: CFloat) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    /// 作成するメモリに読み込んだ音データのタイムストレッチ( 音程を変えずに音の長さを変更する )レートを設定する","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_SetCreateSoundTimeStretchRate(Rate: CFloat) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DPositionSoundMem(Position: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_Set3DRadiusSoundMem(Radius: CFloat, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DPositionSoundMem(Position: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":90},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_SetNextPlay3DRadiusSoundMem(Radius: CFloat, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":86},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":90},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_Set3DReverbParamSoundMem(","highlight_start":1,"highlight_end":40},{"text":"        SOUND3D_REVERB_PARAM: *const XAUDIO2FX_REVERB_PARAMETERS,","highlight_start":1,"highlight_end":66},{"text":"        SoundHandle: CInt,","highlight_start":1,"highlight_end":27},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":60},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMem() -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// ３Ｄサウンド用のプリセットのリバーブエフェクトパラメータを取得する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_Get3DPresetReverbParamSoundMem() -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_Set3DReverbParamSoundMemAll() -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":63},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMemAll() -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    /// 次に作成するメモリに読み込む音データを３Ｄサウンド用にするかどうかを設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_SetCreate3DSoundFlag() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// サウンドの再生にXAudio2を使用するかどうかを設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_SetEnableXAudioFlag() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// ３Ｄ空間の１メートルに相当する距離を設定する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_Set3DSoundOneMetre() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置を設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPos_UpVecY() -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置とリスナーの上方向を設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPosAndUpVec() -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    /// ３Ｄサウンドのリスナーの移動速度を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_Set3DSoundListenerVelocity() -> CInt;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音楽再生関数","highlight_start":1,"highlight_end":14},{"text":"    //pub fn dx_LoadMusicMem(FileName: *const CChar)->CInt;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_PlayMusicMem(MusicHandle: CInt, PlayType: CInt, TopPositionFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    pub fn dx_DeleteMusicMem(MusicHandle: CInt) -> i32;","highlight_start":1,"highlight_end":56},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルを演奏(再生)する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_PlayMusic(FileName:*const CChar ,PlayType:CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルが演奏(再生)中かの情報を取得する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_CheckMusic() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)停止","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_StopMusic() -> CInt;","highlight_start":1,"highlight_end":35},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)の音量を設定する","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetVolumeMusic(Volume: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウエイト関係の関数","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 指定の時間だけ処理をとめる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_WaitTimer(WaitTime: CInt) -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// ディスプレイの垂直同期信号を指定回数待つ","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_WaitVSync() -> CInt;","highlight_start":1,"highlight_end":37},{"text":"    /// キーの入力待ち","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_WaitKey() -> CInt;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 時間関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ミリ秒単位の精度を持つカウンタの現在値を得る","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetNowCount() -> CInt;","highlight_start":1,"highlight_end":37},{"text":"    /// GetNowCountの高精度バージョン","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetNowHiPerformanceCount() -> i64;","highlight_start":1,"highlight_end":49},{"text":"    /// 現在時刻を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetDateTime() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 乱数取得関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 乱数を取得する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_GetRand(rand_max: CInt) -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// 乱数の初期値を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SRand(seed: CInt) -> CInt;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウインドウモード関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウモード・フルスクリーンモードの変更を行う","highlight_start":1,"highlight_end":34},{"text":"    pub fn dx_ChangeWindowMode(flag: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ウインドウのタイトルを変更する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_SetMainWindowText(WindowText: *const CChar) -> CInt;","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウのアイコンを変更する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetWindowIconID(ID: CInt) -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// ウインドウモードの時にウインドウのサイズを自由に変更出来るようにするかどうかを設定する","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_SetWindowSizeChangeEnableFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// ウインドウモードの時のウインドウの大きさと描画画面の大きさの比率を設定する","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetWindowSizeExtendRate(ExRateX: f64, ExRateY: f64) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    // 通信関係","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 他のマシンに接続する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_ConnectNetWork(IPData: IPDATA, Port: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    /// 接続を終了する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_CloseNetWork(NetHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    /// 接続を受け付けられる状態にする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_PreparationListenNetWork(Port: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 接続を受け付けている状態を解除する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_StopListenNetWork() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// データを送信する","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_NetWorkSend(NetHandle: CInt, Buffer: *mut c_void, Length: CInt) -> CInt;","highlight_start":1,"highlight_end":87},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータの量を得る","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_GetNetWorkDataLength() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// 未送信のデータの量を得る","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_GetNetWorkSendDataLength() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータを取得する","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_NetWorkRecv() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// 受信したデータを読み込む、読み込んだデータはバッファから削除されない","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_NetWorkRecvToPeek() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// 新たに確立した接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetNewAcceptNetWork() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// 新たに破棄された接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_GetLostNetWork() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// 接続状態を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetNetWorkAcceptState() -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// 接続先のＩＰアドレスを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetNetWorkIP() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// ＵＤＰを使用して通信するためのソケットを作成する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_MakeUDPSocket() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＵＤＰを使用して通信するためのソケットを削除する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_DeleteUDPSocket() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// ＵＤＰを使用して他のマシンにデータを送信する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_NetWorkSendUDP() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// ＵＤＰを使用して他のマシンからのデータを受信する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_NetWorkRecvUDP() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// ＵＤＰを使用した他のマシンから受信データがあるかどうかを取得する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CheckNetWorkRecvUDP() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ファイル読み込み関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ファイルを開く","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_FileRead_open(FilePath: *mut CChar, ASync: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// ファイルのサイズを得る","highlight_start":1,"highlight_end":20},{"text":"    //pub fn dx_FileRead_size() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルを閉じる","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_FileRead_close(FileHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ファイルポインタの位置を得る","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_FileRead_tell() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルポインタの位置を変更する","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_FileRead_seek() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルからデータを読み込む","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_FileRead_read(Buffer: *mut c_void, ReadSize: CInt, FileHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    /// ファイルの終端かどうかを調べる","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_FileRead_eof(FileHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// ファイルから一行読み出す","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_FileRead_gets(Buffer:*mut CChar,Num:CInt,FileHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    /// ファイルから一文字読み出す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_FileRead_getc() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルから書式付きデータを読み出す","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_FileRead_scanf() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ドット単位で画像にアクセスしたい関係","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ＣＰＵで扱うイメージの読み込み","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_LoadSoftImage(FileName:*const CChar) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    /// ＣＰＵで扱うイメージの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_LoadARGB8ColorSoftImage(FileName:*const CChar) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    /// ＣＰＵで扱うイメージの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //puFileName:*const CCharb fn dx_LoadXRGB8ColorSoftImage(FileName:*const CChar) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_LoadSoftImageToMem() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadARGB8ColorSoftImageToMem() -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadXRGB8ColorSoftImageToMem() -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ＣＰＵで扱うイメージの作成( RGBA8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeARGB8ColorSoftImage() -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// ＣＰＵで扱うイメージの作成( XRGB8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeXRGB8ColorSoftImage() -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// ＣＰＵで扱うイメージの作成( パレット２５６色 カラー )","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_MakePAL8ColorSoftImage() -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// ＣＰＵで扱うイメージの解放","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_DeleteSoftImage() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// ＣＰＵで扱うイメージを全て解放","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_InitSoftImage() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージのサイズを取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetSoftImageSize() -> CInt;","highlight_start":1,"highlight_end":44},{"text":"    /// ＣＰＵで扱うイメージを指定色で塗りつぶす(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_FillSoftImage() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージのパレットをセットする(各色要素は０～２５５)","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_SetPaletteSoftImage() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージのパレットを取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetPaletteSoftImage() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(パレット画像用、有効値は０～２５５)","highlight_start":1,"highlight_end":52},{"text":"    //pub fn dx_DrawPixelPalCodeSoftImage() -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色コードを取得する(パレット画像用、戻り値は０～２５５)","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_GetPixelPalCodeSoftImage() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(各色要素は０～２５５)","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_DrawPixelSoftImage() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色を取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_GetPixelSoftImage() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// ＣＰＵで扱うイメージを別のイメージ上に転送する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_BltSoftImage() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// ＣＰＵで扱うイメージを画面に描画する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_DrawSoftImage() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_CreateGraphFromSoftImage() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージから分割グラフィックハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_CreateDivGraphFromSoftImage() -> CInt;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 非同期読み込み関係","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 非同期読み込みを行うかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetUseASyncLoadFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// ハンドルが非同期読み込み中かどうかを取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_CheckHandleASyncLoad(Handle: CInt) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// 行っている非同期読み込みの数を取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetASyncLoadNum() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列の引数の文字コードを設定する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUseCharCodeFormat(char_code_format: CInt) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    /// 文字列の先頭の文字のバイト数を取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetCharBytes() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ツールバー","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_SetDisplayMenuFlag(Flag: CInt) -> CInt; // メニューを表示するかどうかをセットする","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetDisplayMenuFlag() -> CInt; // メニューを表示しているかどうかを取得する","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetUseMenuFlag() -> CInt; // メニューを使用しているかどうかを得る","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetAutoMenuDisplayFlag(Flag: CInt) -> CInt; // フルスクリーン時にメニューを自動で表示したり非表示にしたりするかどうかのフラグをセットする","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddToolBarButton(Type: CInt, State: CInt, ImageIndex: CInt, ID: CInt) -> CInt; // ツールバーにボタンを追加する","highlight_start":1,"highlight_end":111},{"text":"    pub fn dx_AddToolBarSep() -> CInt; // ツールバーに隙間を追加する","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetToolBarButtonState(ID: CInt) -> CInt; // ツールバーのボタンの状態を取得する","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetToolBarButtonState(ID: CInt, State: CInt) -> CInt; // ツールバーのボタンの状態を設定するpub fn dx_DeleteAllToolBarButton()->CInt ;// ツールバーのボタンを全て削除する","highlight_start":1,"highlight_end":150},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuItem(","highlight_start":1,"highlight_end":27},{"text":"        AddType: CInt,","highlight_start":1,"highlight_end":23},{"text":"        ItemName: *const CChar,","highlight_start":1,"highlight_end":32},{"text":"        ItemID: CInt,","highlight_start":1,"highlight_end":22},{"text":"        SeparatorFlag: CInt,","highlight_start":1,"highlight_end":29},{"text":"        NewItemName: *const CChar,","highlight_start":1,"highlight_end":35},{"text":"        NewItemID: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt; // メニューに項目を追加する","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItem(ItemName: *const CChar, ItemID: CInt) -> CInt; // メニューから選択項目を削除する","highlight_start":1,"highlight_end":95},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CheckMenuItemSelect(ItemName: *const CChar, ItemID: CInt) -> CInt; // メニューが選択されたかどうかを取得する","highlight_start":1,"highlight_end":104},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemEnable(ItemName: *const CChar, ItemID: CInt, EnableFlag: CInt) -> CInt; // メニューの項目を選択出来るかどうかを設定する","highlight_start":1,"highlight_end":123},{"text":"    pub fn dx_SetMenuItemMark(ItemName: *const CChar, ItemID: CInt, Mark: CInt) -> CInt; // メニューの項目にチェックマークやラジオボタンを表示するかどうかを設定する","highlight_start":1,"highlight_end":129},{"text":"    pub fn dx_SetUseMenuFlag(Flag: CInt) -> CInt; // メニューを有効にするかどうかを設定する","highlight_start":1,"highlight_end":73},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CheckMenuItemSelectAll() -> CInt; // メニューの項目がどれか選択されたかどうかを取得する","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuItem_Name(ParentItemName: *const CChar, NewItemName: *const CChar) -> CInt; // メニューに選択項目を追加する","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuLine_Name(ParentItemName: *const CChar) -> CInt; // メニューのリストに区切り線を追加する","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuItem_Name(ItemName: *const CChar, NewItemName: *const CChar) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に新しい項目を追加する","highlight_start":1,"highlight_end":131},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuLine_Name(ItemName: *const CChar) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に区切り線を追加する","highlight_start":1,"highlight_end":103},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItem_Name(ItemName: *const CChar) -> CInt; // メニューから選択項目を削除する","highlight_start":1,"highlight_end":86},{"text":"    pub fn dx_CheckMenuItemSelect_Name(ItemName: *const CChar) -> CInt; // メニューが選択されたかどうかを取得する","highlight_start":1,"highlight_end":95},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemEnable_Name(ItemName: *const CChar, EnableFlag: CInt) -> CInt; // メニューの項目を選択出来るかどうかを設定する","highlight_start":1,"highlight_end":114},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemMark_Name(ItemName: *const CChar, Mark: CInt) -> CInt; // メニューの項目にチェックマークやラジオボタンを表示するかどうかを設定する","highlight_start":1,"highlight_end":120},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuItem_ID(","highlight_start":1,"highlight_end":30},{"text":"        ParentItemID: CInt,","highlight_start":1,"highlight_end":28},{"text":"        NewItemName: *const CChar,","highlight_start":1,"highlight_end":35},{"text":"        NewItemID: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt; // メニューに選択項目を追加する","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuLine_ID(ParentItemID: CInt) -> CInt; // メニューのリストに区切り線を追加する","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuItem_ID(ItemID: CInt, NewItemID: CInt) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に新しい項目を追加する","highlight_start":1,"highlight_end":109},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuLine_ID(ItemID: CInt, NewItemID: CInt) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に区切り線を追加する","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItem_ID(ItemID: CInt) -> CInt; // メニューから選択項目を削除する","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CheckMenuItemSelect_ID(ItemID: CInt) -> CInt; // メニューが選択されたかどうかを取得する","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemEnable_ID(ItemID: CInt, EnableFlag: CInt) -> CInt; // メニューの項目を選択出来るかどうかを設定する","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemMark_ID(ItemID: CInt, Mark: CInt) -> CInt; // メニューの項目にチェックマークやラジオボタンを表示するかどうかを設定する","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItemAll() -> CInt; // メニューの全ての選択項目を削除する","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_ClearMenuItemSelect() -> CInt; // メニューが選択されたかどうかの情報をリセット","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetMenuItemID(ItemName: CInt) -> CInt; // メニューの項目名から項目識別番号を取得する","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetMenuItemName(ItemID: CInt, NameBuffer: *mut CChar) -> CInt; // メニューの項目識別番号から項目名を取得する","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_LoadMenuResource(MenuResourceID: CInt) -> CInt; // メニューをリソースから読み込む","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // クリップボード","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // クリップボードに格納されているテキストデータを読み出す","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_GetClipboardText(DestBuffer: *mut CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ログ関係","highlight_start":1,"highlight_end":12},{"text":"    pub fn dx_ErrorLogAdd(ErrorStr: *const CChar) -> CInt; // ログファイル( Log.txt ) に文字列を出力する","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マイナー関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_SetWindowUserCloseEnableFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetWindowUserCloseFlag(StateResetFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    pub fn dx_SetUseBackBufferTransColorFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    /// ウインドウがアクティブではない状態でも処理を続行するか、フラグをセットする","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetAlwaysRunFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ログ出力を行うか否かのセット","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetOutApplicationLogValidFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// ＤＸアーカイブファイルの読み込み機能を使うかどうかを設定する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetUseDXArchiveFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// 検索するＤＸアーカイブファイルの拡張子を変更する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_SetDXArchiveExtension(Extension: *const CChar) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    /// ＤＸアーカイブファイルの鍵文字列を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetDXArchiveKeyString() -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// ６４０ｘ４８０の画面で３２０ｘ２４０の画面解像度にするかどうかのフラグをセットする","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_SetEmulation320x240(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// ３Ｄ機能を使うか、のフラグをセット","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUse3DFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// ScreenFlip関数実行時にＣＲＴの垂直同期信号待ちをするかのフラグセット","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_SetWaitVSyncFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    // 　描画の際のブレンドモードを詳細に設定する","highlight_start":1,"highlight_end":29},{"text":"    pub fn SetDrawCustomBlendMode(","highlight_start":1,"highlight_end":35},{"text":"        BlendEnable: CInt,","highlight_start":1,"highlight_end":27},{"text":"        SrcBlendRGB: CInt,","highlight_start":1,"highlight_end":27},{"text":"        DestBlendRGB: CInt,","highlight_start":1,"highlight_end":28},{"text":"        BlendOpRGB: CInt,","highlight_start":1,"highlight_end":26},{"text":"        SrcBlendA: CInt,","highlight_start":1,"highlight_end":25},{"text":"        DestBlendA: CInt,","highlight_start":1,"highlight_end":26},{"text":"        BlendOpA: CInt,","highlight_start":1,"highlight_end":24},{"text":"        BlendParam: CInt,","highlight_start":1,"highlight_end":26},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// 必要ならグラフィックの分割を行うか否かを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetUseDivGraphFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// フォーカスが他のソフトに移っているときにバックグラウンドに表示するグラフィックを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_LoadPauseGraph(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"    /// 裏画面の内容を表画面にコピーする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_ScreenCopy() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// 画面の色ビット数を得る","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_GetColorBitDepth() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// 現在描画対象になっている画面をＢＭＰ形式で保存する","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_SaveDrawScreen(x1: CInt, y1: CInt, x2: CInt, y2: CInt, FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":104},{"text":"    /// 使用可能なフォントの名前を列挙する","highlight_start":1,"highlight_end":26},{"text":"    //pub fn dx_EnumFontName() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// 文字列を縦に描画する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_DrawVString() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// フォントハンドルを使用して文字列を縦に描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawVStringToHandle() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// メモリ上の画像ファイルイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CreateGraphFromMem() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// メモリ上の画像ファイルイメージから既存のグラフィックハンドルにデータを転送する","highlight_start":1,"highlight_end":48},{"text":"    //pub fn dx_ReCreateGraphFromMem() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// 画像ファイルから作成したグラフィックハンドルに再度画像ファイルから画像を読み込む","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_ReloadFileGraphAll() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// グラフィックハンドル復元関数を登録する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_SetRestoreGraphCallback() -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// 作成する音データの再生形式を設定する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_SetCreateSoundDataType() -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// メモリ上の音ファイルイメージからサウンドハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadSoundMemByMemImage() -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// ＭＩＤＩの演奏形態をセットする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SelectMidiMode(mode: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// カーソルを点滅させるかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetKeyInputCursorBrinkFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    /// ドラッグアンドドロップを有効化するかどうか設定する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_SetDragFileValidFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ドラッグアンドドロップされたファイルをひとつ読み出す。","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetDragFilePath(FilePathBuffer: *mut CChar) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// ドラッグアンドドロップされたファイルの数を取得する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_GetDragFileNum() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    // ウィンドウの見た目を変える","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_SetWindowStyleMode(Mode: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"rustdoc does not generate documentation for extern blocks","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":235,"byte_end":336,"line_start":11,"line_end":12,"column_start":1,"column_end":43,"is_primary":true,"text":[{"text":"/// dxlib function extern declaration (based on Ver3.24b)","highlight_start":1,"highlight_end":58},{"text":"/// see: https://dxlib.xsrv.jp/dxfunc.html","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `//` for a plain comment","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_doc_comments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused doc comment\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:11:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// dxlib function extern declaration (based on Ver3.24b)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// see: https://dxlib.xsrv.jp/dxfunc.html\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|__________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern \"stdcall\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // 使用必須関数\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ライブラリの初期化\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn dx_SetWindowStyleMode(Mode: CInt) -> CInt;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrustdoc does not generate documentation for extern blocks\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: use `//` for a plain comment\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_doc_comments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::ffi::CStr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":63302,"byte_end":63316,"line_start":1339,"line_end":1339,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"    use std::ffi::CStr;","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":63298,"byte_end":63317,"line_start":1339,"line_end":1339,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    use std::ffi::CStr;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::ffi::CStr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1339:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1339\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::ffi::CStr;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::ffi::CString`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":63327,"byte_end":63344,"line_start":1340,"line_end":1340,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"    use std::ffi::CString;","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":63323,"byte_end":63345,"line_start":1340,"line_end":1340,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    use std::ffi::CString;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::ffi::CString`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1340:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1340\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::ffi::CString;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::os::raw::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":63355,"byte_end":63370,"line_start":1341,"line_end":1341,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"    use std::os::raw::*;","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":63351,"byte_end":63371,"line_start":1341,"line_end":1341,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    use std::os::raw::*;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::os::raw::*`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1341:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::os::raw::*;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::vec::Vec`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":63381,"byte_end":63394,"line_start":1342,"line_end":1342,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    use std::vec::Vec;","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":63377,"byte_end":63395,"line_start":1342,"line_end":1342,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    use std::vec::Vec;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::vec::Vec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1342:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::vec::Vec;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":9662,"byte_end":9663,"line_start":218,"line_end":218,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":9700,"byte_end":9701,"line_start":218,"line_end":218,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_parens)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":9662,"byte_end":9663,"line_start":218,"line_end":218,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":9700,"byte_end":9701,"line_start":218,"line_end":218,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:218:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_parens)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const MV1_SAVETYPE_NORMAL: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mMV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const MV1_SAVETYPE_NORMAL: i32 = MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11677,"byte_end":11678,"line_start":261,"line_end":261,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11697,"byte_end":11698,"line_start":261,"line_end":261,"column_start":55,"column_end":56,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":55,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11677,"byte_end":11678,"line_start":261,"line_end":261,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11697,"byte_end":11698,"line_start":261,"line_end":261,"column_start":55,"column_end":56,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":55,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:261:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_PLAYTYPE_BACK: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_PLAYTYPE_BACKBIT\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_PLAYTYPE_BACK: i32 = DX_PLAYTYPE_BACKBIT;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11735,"byte_end":11736,"line_start":262,"line_end":262,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11777,"byte_end":11778,"line_start":262,"line_end":262,"column_start":77,"column_end":78,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":77,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11735,"byte_end":11736,"line_start":262,"line_end":262,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11777,"byte_end":11778,"line_start":262,"line_end":262,"column_start":77,"column_end":78,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":77,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:262:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_PLAYTYPE_LOOP: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_PLAYTYPE_LOOP: i32 = DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14489,"byte_end":14490,"line_start":323,"line_end":323,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14506,"byte_end":14507,"line_start":323,"line_end":323,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14489,"byte_end":14490,"line_start":323,"line_end":323,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14506,"byte_end":14507,"line_start":323,"line_end":323,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:323:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_ZCMP_DEFAULT: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_CMP_LESSEQUAL\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_ZCMP_DEFAULT: i32 = DX_CMP_LESSEQUAL;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14543,"byte_end":14544,"line_start":324,"line_end":324,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14563,"byte_end":14564,"line_start":324,"line_end":324,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14543,"byte_end":14544,"line_start":324,"line_end":324,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14563,"byte_end":14564,"line_start":324,"line_end":324,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:324:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_ZCMP_REVERSE: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_CMP_GREATEREQUAL\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_ZCMP_REVERSE: i32 = DX_CMP_GREATEREQUAL;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"attribute should be applied to a free function, impl method or static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":381,"byte_end":63157,"line_start":15,"line_end":1330,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"extern \"stdcall\" {","highlight_start":1,"highlight_end":19},{"text":"    // 使用必須関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ライブラリの初期化","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DxLib_Init() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// ライブラリ使用の終了関数","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DxLib_End() -> CInt;","highlight_start":1,"highlight_end":35},{"text":"    /// ウインドウズのメッセージを処理する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_ProcessMessage() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウインドウサイズ(クライアント領域)を設定する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_SetWindowSize(width:CInt,height:CInt)->CInt;","highlight_start":1,"highlight_end":59},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    // Live2D 関係関数","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_Live2D_SetCubism4CoreDLLPath(CoreDLLFilePath: *const CChar) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    pub fn dx_Live2D_RenderBegin() -> CInt;","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_Live2D_RenderEnd() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    pub fn dx_Live2D_LoadModel(FilePath: *const CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"    pub fn dx_Live2D_DeleteModel(Live2DModelHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_Live2D_Model_Update(Live2DModelHandle: CInt, DeltaTimeSeconds: CFloat) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    pub fn dx_Live2D_Model_Draw(Live2DModelHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    pub fn dx_Live2D_Model_SetTranslate(Live2DModelHandle: CInt, x: CFloat, y: CFloat) -> CInt;","highlight_start":1,"highlight_end":96},{"text":"    pub fn dx_Live2D_Model_SetExtendRate(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: CInt,","highlight_start":1,"highlight_end":33},{"text":"        ExRateX: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        ExRateY: CFloat,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_Live2D_Model_SetRotate(Live2DModelHandle: CInt, RotAngle: CFloat) -> CInt;","highlight_start":1,"highlight_end":89},{"text":"    pub fn dx_Live2D_Model_StartMotion(","highlight_start":1,"highlight_end":40},{"text":"        Live2DModelHandle: CInt,","highlight_start":1,"highlight_end":33},{"text":"        group: *const CChar,","highlight_start":1,"highlight_end":29},{"text":"        no: CInt,","highlight_start":1,"highlight_end":18},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_Live2D_Model_IsMotionFinished(Live2DModelHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    pub fn dx_Live2D_Model_SetExpression(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: CInt,","highlight_start":1,"highlight_end":33},{"text":"        expressionID: *const CChar,","highlight_start":1,"highlight_end":36},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ３Ｄ関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //３Ｄ図形描画関係関数","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_DrawLine3D(Pos1: VECTOR, Pos2: VECTOR, Color: Color) -> CInt;","highlight_start":1,"highlight_end":76},{"text":"    pub fn dx_DrawTriangle3D(","highlight_start":1,"highlight_end":30},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos3: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawSphere3D(","highlight_start":1,"highlight_end":28},{"text":"        CenterPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        DivNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCapsule3D(","highlight_start":1,"highlight_end":29},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        DivNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCone3D(","highlight_start":1,"highlight_end":26},{"text":"        TopPos: VECTOR,","highlight_start":1,"highlight_end":24},{"text":"        BottomPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        DivNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawBillboard3D(","highlight_start":1,"highlight_end":31},{"text":"        Pos: VECTOR,","highlight_start":1,"highlight_end":21},{"text":"        cx: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        cy: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        Size: CFloat,","highlight_start":1,"highlight_end":22},{"text":"        Angle: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPolygonIndexed3D(","highlight_start":1,"highlight_end":36},{"text":"        Vertex: *mut VERTEX3D,","highlight_start":1,"highlight_end":31},{"text":"        VertexNum: CInt,","highlight_start":1,"highlight_end":25},{"text":"        Indices: *mut u16,","highlight_start":1,"highlight_end":27},{"text":"        PolygonNum: CInt,","highlight_start":1,"highlight_end":26},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPolygon3D(","highlight_start":1,"highlight_end":29},{"text":"        Vertex: *mut VERTEX3D,","highlight_start":1,"highlight_end":31},{"text":"        PolygonNum: CInt,","highlight_start":1,"highlight_end":26},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMaterialUseVertDifColor(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    pub fn dx_SetMaterialUseVertSpcColor(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    pub fn dx_SetMaterialParam(Material: MATERIALPARAM) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Zバッファを使うかどうかのフラグ","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetUseZBuffer3D(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    // Zバッファへの書き込みするかどうかのフラグ","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetWriteZBuffer3D(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_SetUseBackCulling(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_SetTextureAddressModeUV(ModeU: CInt, ModeV: CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_SetFogEnable(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_SetFogColor(Red: CInt, Green: CInt, Blue: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    pub fn dx_SetFogStartEnd(start: CFloat, end: CFloat) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    pub fn dx_GetColorF(Red: CFloat, Green: CFloat, Blue: CFloat, Alpha: CFloat) -> COLOR_F;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_GetColorU8(Red: CInt, Green: CInt, Blue: CInt, Alpha: CInt) -> COLOR_U8;","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // カメラ関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_SetCameraPositionAndTarget_UpVecY(Position: VECTOR, Target: VECTOR) -> CInt;","highlight_start":1,"highlight_end":91},{"text":"    pub fn dx_SetCameraNearFar(Near: CFloat, Far: CFloat) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_SetCameraPositionAndTargetAndUpVec(","highlight_start":1,"highlight_end":50},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Target: VECTOR,","highlight_start":1,"highlight_end":24},{"text":"        Up: VECTOR,","highlight_start":1,"highlight_end":20},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_SetCameraPositionAndAngle(","highlight_start":1,"highlight_end":41},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        VRotate: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        HRotate: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        TRotate: CFloat,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_SetCameraViewMatrix(ViewMatrix: MATRIX) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_SetupCamera_Perspective(Fov: CFloat) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_SetupCamera_Ortho(Size: CFloat) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_SetupCamera_ProjectionMatrix(ProjectionMatrix: MATRIX) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    pub fn dx_SetCameraDotAspect(DotAspect: CFloat) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_ConvWorldPosToScreenPos(WorldPos: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_ConvScreenPosToWorldPos(ScreenPos: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":68},{"text":"    pub fn dx_SetCameraScreenCenter(x: CFloat, y: CFloat) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_CheckCameraViewClip(CheckPos: VECTOR) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_CheckCameraViewClip_Box(BoxPos1: VECTOR, BoxPos2: VECTOR) -> CInt;","highlight_start":1,"highlight_end":81},{"text":"    pub fn dx_GetCameraViewMatrix() -> MATRIX;","highlight_start":1,"highlight_end":47},{"text":"    pub fn dx_GetCameraProjectionMatrix() -> MATRIX;","highlight_start":1,"highlight_end":53},{"text":"    // ライト関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_SetUseLighting(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_SetGlobalAmbientLight(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //標準ライト関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_ChangeLightTypeDir(Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_ChangeLightTypePoint(","highlight_start":1,"highlight_end":36},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_ChangeLightTypeSpot(","highlight_start":1,"highlight_end":35},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Direction: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        OutAngle: CFloat,","highlight_start":1,"highlight_end":26},{"text":"        InAngle: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_SetLightEnable(EnableFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_SetLightDifColor(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightSpcColor(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_SetLightAmbColor(Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_SetLightDirection(Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_SetLightPosition(Position: VECTOR) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_SetLightRangeAtten(","highlight_start":1,"highlight_end":34},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightAngle(OutAngle: CFloat, InAngle: CFloat) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightType() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightEnable() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_GetLightDifColor() -> COLOR_F;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightSpcColor() -> COLOR_F;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightAmbColor() -> COLOR_F;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightDirection() -> VECTOR;","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_GetLightPosition() -> VECTOR;","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_GetLightRangeAtten(","highlight_start":1,"highlight_end":34},{"text":"        Range: *mut CFloat,","highlight_start":1,"highlight_end":28},{"text":"        Atten0: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten1: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten2: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_GetLightAngle(OutAngle: *mut CFloat, InAngle: *mut CFloat) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //ライトハンドル関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CreateDirLightHandle(Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CreatePointLightHandle(","highlight_start":1,"highlight_end":38},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CreateSpotLightHandle(","highlight_start":1,"highlight_end":37},{"text":"        Position: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        Direction: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        OutAngle: CFloat,","highlight_start":1,"highlight_end":26},{"text":"        InAngle: CFloat,","highlight_start":1,"highlight_end":25},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DeleteLightHandle(LHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteLightHandleAll() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetLightTypeHandle(LHandle: CInt, LightType: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    pub fn dx_SetLightEnableHandle(LHandle: CInt, EnableFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightDifColorHandle(LHandle: CInt, Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightSpcColorHandle(LHandle: CInt, Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightAmbColorHandle(LHandle: CInt, Color: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_SetLightDirectionHandle(LHandle: CInt, Direction: VECTOR) -> CInt;","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightPositionHandle(LHandle: CInt, Position: VECTOR) -> CInt;","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightRangeAttenHandle(","highlight_start":1,"highlight_end":40},{"text":"        LHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        Range: CFloat,","highlight_start":1,"highlight_end":23},{"text":"        Atten0: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten1: CFloat,","highlight_start":1,"highlight_end":24},{"text":"        Atten2: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetLightAngleHandle(LHandle: CInt, OutAngle: CFloat, InAngle: CFloat) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_GetLightTypeHandle(LHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightEnableHandle(LHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_GetLightDifColorHandle(LHandle: CInt) -> COLOR_F;","highlight_start":1,"highlight_end":64},{"text":"    pub fn dx_GetLightSpcColorHandle(LHandle: CInt) -> COLOR_F;","highlight_start":1,"highlight_end":64},{"text":"    pub fn dx_GetLightAmbColorHandle(LHandle: CInt) -> COLOR_F;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightDirectionHandle(LHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightPositionHandle(LHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightRangeAttenHandle(","highlight_start":1,"highlight_end":40},{"text":"        LHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        Range: *mut CFloat,","highlight_start":1,"highlight_end":28},{"text":"        Atten0: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten1: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"        Atten2: *mut CFloat,","highlight_start":1,"highlight_end":29},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetLightAngleHandle(","highlight_start":1,"highlight_end":35},{"text":"        LHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        OutAngle: *mut CFloat,","highlight_start":1,"highlight_end":31},{"text":"        InAngle: *mut CFloat,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetEnableLightHandleNum() -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_GetEnableLightHandle(Index: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //算術演算関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_VGet(x: CFloat, y: CFloat, z: CFloat) -> VECTOR;","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_VAdd(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VSub(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VDot(In1: VECTOR, In2: VECTOR) -> CFloat;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VCross(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_VScale(In: VECTOR, Scale: CFloat) -> VECTOR;","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_VSize(In: VECTOR) -> CFloat;","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_VSquareSize(In: VECTOR) -> CFloat;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_VNorm(In: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_VTransform(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":62},{"text":"    pub fn dx_VTransformSR(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetIdent() -> MATRIX;","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_MGetScale(Scale: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_MGetTranslate(Trans: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_MGetRotX(XAxisRotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotY(YAxisRotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_MGetRotZ(ZAxisRotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotAxis(RotateAxis: VECTOR, Rotate: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_MGetRotVec2(In1: VECTOR, In2: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis1(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis2(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_MAdd(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_MMult(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_MScale(InM: MATRIX, Scale: CFloat) -> MATRIX;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_MTranspose(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_MInverse(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 衝突検出系関数","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_Segment_Segment_MinLength(","highlight_start":1,"highlight_end":41},{"text":"        SegmentAPos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        SegmentAPos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        SegmentBPos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        SegmentBPos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CFloat;","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_Segment_Triangle_MinLength(","highlight_start":1,"highlight_end":42},{"text":"        SegmentPos1: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        SegmentPos2: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        TrianglePos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos3: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CFloat;","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_Segment_Point_MinLength(","highlight_start":1,"highlight_end":39},{"text":"        SegmentPos1: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        SegmentPos2: VECTOR,","highlight_start":1,"highlight_end":29},{"text":"        PointPos: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"    ) -> CFloat;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_HitCheck_Line_Triangle(","highlight_start":1,"highlight_end":38},{"text":"        LinePos1: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        LinePos2: VECTOR,","highlight_start":1,"highlight_end":26},{"text":"        TrianglePos1: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos2: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"        TrianglePos3: VECTOR,","highlight_start":1,"highlight_end":30},{"text":"    ) -> HITRESULT_LINE;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ３Ｄモデル関係の関数","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの読み込み・複製関係の関数","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの読み込み","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_MV1LoadModel(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    pub fn dx_MV1DuplicateModel(SrcMHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_MV1DeleteModel(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_MV1SetLoadModelUsePhysicsMode(PhysicsMode: CInt) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    pub fn dx_MV1SetLoadModelPhysicsWorldGravity(Gravity: CFloat) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデル描画関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_MV1DrawModel(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_MV1DrawFrame(MHandle: CInt, FrameIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":69},{"text":"    pub fn dx_MV1DrawMesh(MHandle: CInt, MeshIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_MV1DrawTriangleList(MHandle: CInt, TriangleListIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデル描画設定関数","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1SetUseOrigShader(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデル基本制御関数","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの位置の指定","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1SetPosition(MHandle: CInt, Position: VECTOR) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1GetPosition(MHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_MV1SetScale(MHandle: CInt, Scale: VECTOR) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1GetScale(MHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1SetRotationXYZ(MHandle: CInt, Rotate: VECTOR) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    pub fn dx_MV1GetRotationXYZ(MHandle: CInt) -> VECTOR;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_MV1SetRotationZYAxis(","highlight_start":1,"highlight_end":36},{"text":"        MHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        ZAxis: VECTOR,","highlight_start":1,"highlight_end":23},{"text":"        YAxis: VECTOR,","highlight_start":1,"highlight_end":23},{"text":"        ZTwist: CFloat,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_MV1SetMatrix(MHandle: CInt, Matrix: MATRIX) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_MV1GetMatrix(MHandle: CInt) -> MATRIX;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_MV1SetVisible(MHandle: CInt, VisibleFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    pub fn dx_MV1GetVisible(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_MV1SetDifColorScale(MHandle: CInt, Scale: COLOR_F) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1SetUseVertDifColor(MHandle: CInt, UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    pub fn dx_MV1SetUseVertSpcColor(MHandle: CInt, UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    pub fn dx_MV1PhysicsCalculation(MHandle: CInt, MillisecondTime: CFloat) -> CInt;","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // アニメーション関数","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1AttachAnim(","highlight_start":1,"highlight_end":29},{"text":"        MHandle: CInt,","highlight_start":1,"highlight_end":23},{"text":"        AnimIndex: CInt,","highlight_start":1,"highlight_end":25},{"text":"        AnimSrcMHandle: CInt,","highlight_start":1,"highlight_end":30},{"text":"        NameCheck: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_MV1GetAnimNum(MHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_MV1DetachAnim(MHandle: CInt, AttachIndex: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    pub fn dx_MV1SetAttachAnimTime(MHandle: CInt, AttachIndex: CInt, Time: CFloat) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_MV1GetAttachAnimTotalTime(MHandle: CInt, AttachIndex: CInt) -> CFloat;","highlight_start":1,"highlight_end":85},{"text":"    pub fn dx_MV1GetAttachAnimTime(MHandle: CInt, AttachIndex: CInt) -> CFloat;","highlight_start":1,"highlight_end":80},{"text":"    pub fn dx_MV1SetAttachAnimBlendRate(MHandle: CInt, AttachIndex: CInt, Rate: CFloat) -> CInt;","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // シェイプ関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MV1SetShapeRate(MHandle: CInt, ShapeIndex: CInt, Rate: CFloat) -> CInt;","highlight_start":1,"highlight_end":86},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 図形描画関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 線を描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawLine(x1: CInt, y1: CInt, x2: CInt, y2: CInt, color: Color) -> CInt;","highlight_start":1,"highlight_end":86},{"text":"    /// 線を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawLineAA(x1: CFloat, y1: CFloat, x2: CFloat, y2: CFloat, color: Color) -> CInt;","highlight_start":1,"highlight_end":96},{"text":"    /// 四角を描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawBox(","highlight_start":1,"highlight_end":23},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 四角を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawBoxAA(","highlight_start":1,"highlight_end":25},{"text":"        x1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        x2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 円の描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawCircle(x: CInt, y: CInt, r: CInt, color: Color, fill_flag: CInt) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    /// 円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawCircleAA(","highlight_start":1,"highlight_end":28},{"text":"        x: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        y: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        r: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        pos_num: CInt,","highlight_start":1,"highlight_end":23},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 楕円の描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawOval(x: CInt, y: CInt, rx: CInt, ry: CInt, Color: Color, FillFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":100},{"text":"    /// 楕円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawOvalAA(","highlight_start":1,"highlight_end":26},{"text":"        x: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        y: CFloat,","highlight_start":1,"highlight_end":19},{"text":"        rx: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        ry: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        posnum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 三角形の描画","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawTriangle(","highlight_start":1,"highlight_end":28},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 三角形の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawTriangleAA(","highlight_start":1,"highlight_end":30},{"text":"        x1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y1: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        x2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y2: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        x3: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        y3: CFloat,","highlight_start":1,"highlight_end":20},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 点を描画する","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPixel(x: CInt, y: CInt, Color: Color) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// 指定点の色を取得","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_GetPixel(x: CInt, y: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // グラフィックデータ制御関数","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画像ファイルを読みこんで画面に表示する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_LoadGraphScreen() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// 画像ファイルのメモリへの読みこみ、及び動画ファイルのロード","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadGraph() -> CInt;","highlight_start":1,"highlight_end":37},{"text":"    /// 画像ファイルのメモリへの分割読みこみ","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadDivGraph(FileName:*const CChar,AllNum:CInt,XNum:CInt,YNum:CInt,XSize:CInt,YSize:CInt,HandleBuf:*mut CInt) -> CInt;","highlight_start":1,"highlight_end":135},{"text":"    /// 空のグラフィックを作成する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeGraph(SizeX: CInt, SizeY: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// 描画対象にできるグラフィックを作成する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_MakeScreen(SizeX: CInt, SizeY: CInt, UseAlphaChannel: CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    /// 描画対象にできるグラフィックのマルチサンプリング設定を行う","highlight_start":1,"highlight_end":38},{"text":"    pub fn dx_SetCreateDrawValidGraphMultiSample(Samples: CInt, Quality: CInt) -> CInt;","highlight_start":1,"highlight_end":88},{"text":"    /// 作成するグラフィックのビット深度を設定する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetCreateGraphColorBitDepth(BitDepth: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// 描画可能な浮動小数点型のグラフィックを作成するかどうかの設定を行う","highlight_start":1,"highlight_end":42},{"text":"    pub fn dx_SetDrawValidFloatTypeGraphCreateFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    /// 作成する描画可能なグラフィックのチャンネル数の設定を行う","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetCreateDrawValidGraphChannelNum(ChannelNum: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    /// 読み込み時に画像を乗算済みα画像に変換するかを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetUsePremulAlphaConvertLoad(UseFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// メモリに読みこんだグラフィックの描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawGraph(x: CInt, y: CInt, GrHandle: CInt, TransFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":84},{"text":"    // メモリに読み込んだグラフィックの描画　(float版)","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_DrawGraphF(x: CFloat, y: CFloat, GrHandle: CInt, TransFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":89},{"text":"    /// メモリに読みこんだグラフィックのＬＲ反転描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawTurnGraph(","highlight_start":1,"highlight_end":29},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの拡大縮小描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawExtendGraph(","highlight_start":1,"highlight_end":31},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの回転描画","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawRotaGraph(","highlight_start":1,"highlight_end":29},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        ex_rate: f64,","highlight_start":1,"highlight_end":22},{"text":"        angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        gr_handle: CInt,","highlight_start":1,"highlight_end":25},{"text":"        trans_flag: CInt,","highlight_start":1,"highlight_end":26},{"text":"        turn_flag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり)","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_DrawRotaGraph2(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        cx: CInt,","highlight_start":1,"highlight_end":18},{"text":"        cy: CInt,","highlight_start":1,"highlight_end":18},{"text":"        ExtRate: f64,","highlight_start":1,"highlight_end":22},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        TurnFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり、縦横拡大率別指定)","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_DrawRotaGraph3(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        cx: CInt,","highlight_start":1,"highlight_end":18},{"text":"        cy: CInt,","highlight_start":1,"highlight_end":18},{"text":"        ExtRateX: f64,","highlight_start":1,"highlight_end":23},{"text":"        ExtRateY: f64,","highlight_start":1,"highlight_end":23},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        TurnFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読みこんだグラフィックの自由変形描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawModiGraph(","highlight_start":1,"highlight_end":29},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y3: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x4: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y4: CInt,","highlight_start":1,"highlight_end":18},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// グラフィックの指定矩形部分のみを描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawRectGraph(","highlight_start":1,"highlight_end":29},{"text":"        DestX: CInt,","highlight_start":1,"highlight_end":21},{"text":"        DestY: CInt,","highlight_start":1,"highlight_end":21},{"text":"        SrcX: CInt,","highlight_start":1,"highlight_end":20},{"text":"        SrcY: CInt,","highlight_start":1,"highlight_end":20},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        GraphHandle: CInt,","highlight_start":1,"highlight_end":27},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        TurnFlag: CInt,","highlight_start":1,"highlight_end":24},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 指定のグラフィックの指定部分だけを抜き出して新たなグラフィックを作成する","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_DerivationGraph(","highlight_start":1,"highlight_end":31},{"text":"        SrcX: CInt,","highlight_start":1,"highlight_end":20},{"text":"        SrcY: CInt,","highlight_start":1,"highlight_end":20},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        SrcGraphHandle: CInt,","highlight_start":1,"highlight_end":30},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 描画先に設定されているグラフィック領域から指定領域のグラフィックを読みこむ","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_GetDrawScreenGraph(x1: CInt, y1: CInt, x2: CInt, y2: CInt, GrHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":98},{"text":"    /// グラフィックのサイズを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetGraphSize() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// 読みこんだグラフィックデータをすべて削除する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_InitGraph() -> CInt;","highlight_start":1,"highlight_end":35},{"text":"    /// 指定のグラフィックをメモリ上から削除する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DeleteGraph(GrHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// 描画モードをセットする","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetDrawMode(DrawMode: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// 描画の際のブレンドモードをセットする","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_SetDrawBlendMode(blend_mode: CInt, pal: CInt) -> CInt;","highlight_start":1,"highlight_end":69},{"text":"    /// 描画輝度をセット","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetDrawBright(RedBright: CInt, GreenBright: CInt, BlueBright: CInt) -> CInt;","highlight_start":1,"highlight_end":91},{"text":"    /// グラフィックに設定する透過色をセットする","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetTransColor(Red: CInt, Green: CInt, Blue: CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    // 画像ファイルからブレンド画像を読み込む","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadBlendGraph() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// ブレンド画像と通常画像を合成して描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawBlendGraph(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        GrHandle: CInt,","highlight_start":1,"highlight_end":24},{"text":"        TransFlag: CInt,","highlight_start":1,"highlight_end":25},{"text":"        BlendGraph: CInt,","highlight_start":1,"highlight_end":26},{"text":"        BorderParam: CInt,","highlight_start":1,"highlight_end":27},{"text":"        BorderRange: CInt,","highlight_start":1,"highlight_end":27},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 画像にフィルター処理を施す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GraphFilter() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// 画像にフィルター処理を施す( 出力先画像指定版 )","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GraphFilterBlt() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// 画像にフィルター処理を施す( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GraphFilterRectBlt() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// 二つの画像を特殊効果付きでブレンドする","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GraphBlend() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像指定版 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_GraphBlendBlt() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_GraphBlendRectBlt() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字描画関係関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列を描画する","highlight_start":1,"highlight_end":17},{"text":"    //  pub fn dx_DrawString(x: CInt, y: CInt, string: *const CChar, color: Color) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    /// 書式付き文字列を描画する","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_DrawFormatString(x:CInt,y:CInt,color:Color,format:*const CChar, ...) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    /// DrawString で描画される文字列の幅(ドット単位)を得る","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetDrawStringWidth() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// DrawFormatString 関数書式付き文字列の描画幅(ドット単位)を得る","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_GetDrawFormatStringWidth() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// 描画する文字列のサイズをセットする","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetFontSize(size: CInt) -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// 描画する文字列の文字の太さをセットする","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetFontThickness(TinckPal: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// 描画するフォントを変更する","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_ChangeFont(name: *const CChar) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// 文字列描画に使用するフォントのタイプを変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_ChangeFontType(FontType: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// 新しいフォントデータを作成","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_CreateFontToHandle(FontName: *const CChar,Size: CInt,Thick: CInt,FontType: CInt) -> CInt;","highlight_start":1,"highlight_end":106},{"text":"    /// ＤＸフォントデータファイルを読み込む","highlight_start":1,"highlight_end":27},{"text":"    // pub fn dx_LoadFontDataToHandle(FileName: *const CChar, EdgeSize: CInt) -> CInt;","highlight_start":1,"highlight_end":87},{"text":"    /// フォントデータを削除する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DeleteFontToHandle(FontHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 作成するフォントデータを『乗算済みα』用にするかどうかを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetFontCacheUsePremulAlphaFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    /// 指定のフォントデータで文字列を描画する","highlight_start":1,"highlight_end":28},{"text":"    // pub fn dx_DrawStringToHandle(x: CInt,y: CInt,String: *const CChar,Color: Color,FontHandle: CInt,) -> CInt;","highlight_start":1,"highlight_end":114},{"text":"    /// 指定のフォントデータで書式付き文字列を描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawFormatStringToHandle() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// 指定のフォントデータで描画する文字列の幅を得る","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_GetDrawStringWidthToHandle(String:*const CChar,StrLen:CInt, FontHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":102},{"text":"    /// 指定のフォントデータで書式付き文字列の描画幅を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetDrawFormatStringWidthToHandle() -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 指定のフォントデータの情報を得る","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_GetFontStateToHandle(FontName:*const CChar,Size:*mut CInt,Thick:*mut CInt,FontHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":116},{"text":"    /// フォントデータを全て初期化する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_InitFontToHandle() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 簡易画面出力関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub fn dx_() -> CInt;","highlight_start":1,"highlight_end":28},{"text":"    // 簡易文字列描画","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub unsafe fn  dx_printfDx(arg: T, arg2: U, mut args: ...) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// 簡易画面出力履歴をクリアする","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_clsDx() -> CInt;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // その他画面操作系関数","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画面モードの変更","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetGraphMode(SizeX: CInt, SizeY: CInt, ColorBitNum: CInt, RefreshRate: CInt) -> CInt;","highlight_start":1,"highlight_end":100},{"text":"    /// フルスクリーンモード時の解像度モードを設定する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SetFullScreenResolutionMode(ResolutionMode: CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    /// フルスクリーンモード時の画面拡大モードを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFullScreenScalingMode(ScalingMode: CInt) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// 現在の画面の大きさとカラービット数を得る","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_GetScreenState(SizeX:*mut CInt,SizeY:*mut CInt,ColorBitDepth:*mut CInt) -> CInt;","highlight_start":1,"highlight_end":97},{"text":"    /// 描画可能領域のセット","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_SetDrawArea(x1: CInt, y1: CInt, x2: CInt, y2: CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    /// 画面に描かれたものを消去する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_ClearDrawScreen() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// 画面の背景色を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetBackgroundColor(Red: CInt, Green: CInt, Blue: CInt) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    /// 色コードを取得する","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_GetColor(Red: CInt, Green: CInt, Blue: CInt) -> Color;","highlight_start":1,"highlight_end":69},{"text":"    /// 描画先グラフィック領域の指定","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetDrawScreen(DrawScreen: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// フリップ関数、画面の裏ページ(普段は表示されていない)の内容を表ページ(普段表示されている)に反映する","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_ScreenFlip() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// 画面のフルスクリーンアンチエイリアスモードの設定をする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetFullSceneAntiAliasingMode(Samples: CInt, Quality: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 動画関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 動画ファイルの再生","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_PlayMovie(FileName:*const CChar,ExRate:CInt,PlayType:CInt) -> CInt;","highlight_start":1,"highlight_end":84},{"text":"    /// ムービーグラフィックの動画の再生を開始する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_PlayMovieToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// ムービーグラフィックの動画再生を一時停止する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_PauseMovieToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// ムービーグラフィックの動画の再生位置を変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SeekMovieToGraph(GraphHandle: CInt, Time: CInt) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"    /// ムービーグラフィックの動画の再生位置を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_TellMovieToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// ムービーグラフィックの動画の再生状態を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_GetMovieStateToGraph(GraphHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マスク関係関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マスク画面を作成する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_CreateMaskScreen() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// マスク画面を削除する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteMaskScreen() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から構築する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_LoadMask(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から分割構築する","highlight_start":1,"highlight_end":44},{"text":"    //pub fn dx_LoadDivMask() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// マスクデータをマスク画面に描画する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_DrawMask(x: CInt, y: CInt, MaskHandle: CInt, TransMode: CInt) -> CInt;","highlight_start":1,"highlight_end":85},{"text":"    /// 指定のマスク画面領域を指定のマスクデータをタイル上に並べて埋める","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMask(x1: CInt, y1: CInt, x2: CInt, y2: CInt, MaskHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    /// マスクデータを削除","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DeleteMask(MaskHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// マスクデータを初期化する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_InitMask() -> CInt;","highlight_start":1,"highlight_end":34},{"text":"    /// マスク画面を指定の色で塗りつぶす","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_FillMaskScreen(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// マスク画面の有効の有無を変更","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetUseMaskScreenFlag(ValidFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    /// 空のマスクデータの作成","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_MakeMask(Width: CInt, Height: CInt) -> CInt;","highlight_start":1,"highlight_end":59},{"text":"    /// マスクデータの大きさを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetMaskSize(WidthBuf:*mut CInt,HeightBuf:*mut CInt,MaskHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    /// マスクのデータをマスクデータ領域に転送する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetDataToMask(","highlight_start":1,"highlight_end":29},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        MaskHandle: CInt,","highlight_start":1,"highlight_end":26},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// マスクのデータをマスク画面に直接描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawMaskToDirectData(","highlight_start":1,"highlight_end":36},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        TransMode: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// マスクのデータをタイル上に並べた形で直接マスク画面全体に描画する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMaskToDirectData(","highlight_start":1,"highlight_end":40},{"text":"        x1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y1: CInt,","highlight_start":1,"highlight_end":18},{"text":"        x2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        y2: CInt,","highlight_start":1,"highlight_end":18},{"text":"        Width: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Height: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 入力関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ジョイパッドが接続されている数を取得する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetJoypadNum() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// ジョイパッドの入力状態を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetJoypadInputState(InputType: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// ジョイパッドのアナログ的なレバー入力情報を得る","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_GetJoypadAnalogInput(XBuf: *mut CInt, YBuf: *mut CInt, InputType: CInt) -> CInt;","highlight_start":1,"highlight_end":95},{"text":"    /// ジョイパッドのDirectInputから取得できる情報を得る","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GetJoypadDirectInputState() -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    /// ジョイパッドのXInputから取得できる情報を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetJoypadXInputState() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// ジョイパッドの方向入力の無効範囲を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetJoypadDeadZone() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// ジョイパッドの振動を開始する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_StartJoypadVibration(","highlight_start":1,"highlight_end":36},{"text":"        InputType: CInt,","highlight_start":1,"highlight_end":25},{"text":"        Power: CInt,","highlight_start":1,"highlight_end":21},{"text":"        Time: CInt,","highlight_start":1,"highlight_end":20},{"text":"        EffectIndex: CInt,","highlight_start":1,"highlight_end":27},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// ジョイパッドの振動を停止する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_StopJoypadVibration() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マウスカーソルの表示設定フラグのセット","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetMouseDispFlag(DispFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// マウスカーソルの位置を取得する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_GetMousePoint(XBuf: *mut CInt, YBuf: *mut CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    /// マウスカーソルの位置をセットする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetMousePoint(PointX: CInt, PointY: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// マウスのボタンの状態を得る","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_GetMouseInput() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// マウスのボタンが押されたり離されたりした履歴を取得する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_GetMouseInputLog2(Button:*mut CInt,ClickX:*mut CInt,ClickY:*mut CInt,LogType:*mut CInt, LogDelete:CInt ) -> CInt;","highlight_start":1,"highlight_end":130},{"text":"    /// マウスホイールの回転量を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetMouseWheelRotVol() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// タッチされている箇所の数を取得する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_GetTouchInputNum() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// タッチされている箇所の情報を取得する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_GetTouchInput(InputNo:CInt,PositionX:*mut CInt,PositionY:*mut CInt,ID:*mut CInt,Device:*mut CInt) -> CInt;","highlight_start":1,"highlight_end":123},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// すべてのキーの押下状態を取得","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckHitKeyAll(check_type: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// 特定キーの入力状態を得る","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_CheckHitKey(key_code: CInt) -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// キーボードのすべてのキーの押下状態を取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetHitKeyStateAll(key_state_buf: *mut CChar) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetInputChar(DeleteFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する、バッファになにも文字コードがない場合はキーが押されるまで待つ","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_GetInputCharWait(DeleteFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// 文字入力バッファをクリアする","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_ClearInputCharBuf() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// キーボードによる文字列の入力","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_KeyInputString(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        CharMaxLength: CInt,","highlight_start":1,"highlight_end":29},{"text":"        StrBuffer: *mut CChar,","highlight_start":1,"highlight_end":31},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// キーボードによる半角文字列のみの入力","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_KeyInputSingleCharString(","highlight_start":1,"highlight_end":40},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        CharMaxLength: CInt,","highlight_start":1,"highlight_end":29},{"text":"        StrBuffer: *mut CChar,","highlight_start":1,"highlight_end":31},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// キーボードによる数値の入力","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_KeyInputNumber(","highlight_start":1,"highlight_end":30},{"text":"        x: CInt,","highlight_start":1,"highlight_end":17},{"text":"        y: CInt,","highlight_start":1,"highlight_end":17},{"text":"        MaxNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        MinNum: CInt,","highlight_start":1,"highlight_end":22},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// KeysnputString系 関数使用時の文字の各色を変更する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetKeyInputStringColor(","highlight_start":1,"highlight_end":38},{"text":"        NmlStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        NmlCur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrBack: u32,","highlight_start":1,"highlight_end":25},{"text":"        IMECur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMELine: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStr: u32,","highlight_start":1,"highlight_end":27},{"text":"        IMEModeStr: u32,","highlight_start":1,"highlight_end":25},{"text":"        NmlStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStrE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMEModeStrE: u32,","highlight_start":1,"highlight_end":26},{"text":"        IMESelectWinE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMESelectWinF: u32,","highlight_start":1,"highlight_end":28},{"text":"        SelectStrBackColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        SelectStrColor: u32,","highlight_start":1,"highlight_end":29},{"text":"        SelectStrEdgeColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        IMEStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// 新しいキー入力データの作成","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeKeyInput(","highlight_start":1,"highlight_end":28},{"text":"        MaxStrLength: CInt,","highlight_start":1,"highlight_end":28},{"text":"        CancelValidFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"        SingleCharOnlyFlag: CInt,","highlight_start":1,"highlight_end":34},{"text":"        NumCharOnlyFlag: CInt,","highlight_start":1,"highlight_end":31},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// キー入力データの削除","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteKeyInput(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"    /// すべてのキー入力データの削除","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_InitKeyInput() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// 指定のキー入力をアクティブにする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetActiveKeyInput(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 入力が終了しているか取得する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckKeyInput(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// キー入力中データの描画","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_DrawKeyInputString(x: CInt, y: CInt, InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":79},{"text":"    /// 入力モード文字列を描画する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_DrawKeyInputModeString(x: CInt, y: CInt) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"    /// キー入力データに指定の文字列をセットする","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_SetKeyInputString() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// キー入力データに指定の数値を文字に置き換えてセットする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetKeyInputNumber(Number: CInt, InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// 入力データの文字列を取得する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_GetKeyInputString() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// 入力データの文字列を数値として取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetKeyInputNumber(InputHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音利用関数","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 音ファイルを再生する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_PlaySoundFile(FileName:&str,PlayType:CInt) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    /// 音ファイルが再生中か調べる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_CheckSoundFile() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// 音ファイルの再生を止める","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_StopSoundFile() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// 音ファイルをメモリに読みこむ","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_LoadSoundMem() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// メモリに読みこんだ音データを再生する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_PlaySoundMem(SoundHandle: CInt, PlayType: CInt, TopPositionFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    /// メモリに読みこんだ音データが再生中か調べる","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_CheckSoundMem(SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// メモリに読み込んだ音データの再生を止める","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_StopSoundMem(SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// メモリに読みこんだ音データを削除する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DeleteSoundMem(SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":57},{"text":"    /// メモリに読みこんだ音データをすべて消去する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_InitSoundMem() -> CInt;","highlight_start":1,"highlight_end":38},{"text":"    /// メモリに読みこんだ音データの再生にパンを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_ChangePanSoundMem(PanPal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// メモリに読みこんだ音データの再生にボリュームを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_ChangeVolumeSoundMem(VolumePal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":80},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するパンを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_ChangeNextPlayPanSoundMem(PanPal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するボリュームを設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_ChangeNextPlayVolumeSoundMem(VolumePal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":88},{"text":"    /// メモリに読み込んだ音データの再生周波数を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFrequencySoundMem(FrequencyPal: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetLoopPosSoundMem(LoopTime: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する(サンプル位置指定)","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_SetLoopSamplePosSoundMem(LoopSamplePosition: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    /// メモリに読み込んだ音データの再生位置をサンプル単位で変更する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetCurrentPositionSoundMem(SamplePosition: CInt, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":91},{"text":"    /// 既にメモリに読み込んである音データを使用するサウンドハンドルを新たに作成する( 非ストリームサウンドのみ )","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_DuplicateSoundMem(SrcSoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"    /// 作成するメモリに読み込んだ音データのピッチ( 音の長さを変えずに音程を変更する )レートを設定する","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_SetCreateSoundPitchRate(Cents: CFloat) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    /// 作成するメモリに読み込んだ音データのタイムストレッチ( 音程を変えずに音の長さを変更する )レートを設定する","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_SetCreateSoundTimeStretchRate(Rate: CFloat) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DPositionSoundMem(Position: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_Set3DRadiusSoundMem(Radius: CFloat, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DPositionSoundMem(Position: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":90},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_SetNextPlay3DRadiusSoundMem(Radius: CFloat, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":86},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":90},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_Set3DReverbParamSoundMem(","highlight_start":1,"highlight_end":40},{"text":"        SOUND3D_REVERB_PARAM: *const XAUDIO2FX_REVERB_PARAMETERS,","highlight_start":1,"highlight_end":66},{"text":"        SoundHandle: CInt,","highlight_start":1,"highlight_end":27},{"text":"    ) -> CInt;","highlight_start":1,"highlight_end":15},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":60},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMem() -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// ３Ｄサウンド用のプリセットのリバーブエフェクトパラメータを取得する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_Get3DPresetReverbParamSoundMem() -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_Set3DReverbParamSoundMemAll() -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":63},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMemAll() -> CInt;","highlight_start":1,"highlight_end":61},{"text":"    /// 次に作成するメモリに読み込む音データを３Ｄサウンド用にするかどうかを設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_SetCreate3DSoundFlag() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// サウンドの再生にXAudio2を使用するかどうかを設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_SetEnableXAudioFlag() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// ３Ｄ空間の１メートルに相当する距離を設定する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_Set3DSoundOneMetre() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置を設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPos_UpVecY() -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置とリスナーの上方向を設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPosAndUpVec() -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    /// ３Ｄサウンドのリスナーの移動速度を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_Set3DSoundListenerVelocity() -> CInt;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音楽再生関数","highlight_start":1,"highlight_end":14},{"text":"    //pub fn dx_LoadMusicMem(FileName: *const CChar)->CInt;","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_PlayMusicMem(MusicHandle: CInt, PlayType: CInt, TopPositionFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":94},{"text":"    pub fn dx_DeleteMusicMem(MusicHandle: CInt) -> i32;","highlight_start":1,"highlight_end":56},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルを演奏(再生)する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_PlayMusic(FileName:*const CChar ,PlayType:CInt) -> CInt;","highlight_start":1,"highlight_end":73},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルが演奏(再生)中かの情報を取得する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_CheckMusic() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)停止","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_StopMusic() -> CInt;","highlight_start":1,"highlight_end":35},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)の音量を設定する","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetVolumeMusic(Volume: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウエイト関係の関数","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 指定の時間だけ処理をとめる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_WaitTimer(WaitTime: CInt) -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// ディスプレイの垂直同期信号を指定回数待つ","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_WaitVSync() -> CInt;","highlight_start":1,"highlight_end":37},{"text":"    /// キーの入力待ち","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_WaitKey() -> CInt;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 時間関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ミリ秒単位の精度を持つカウンタの現在値を得る","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetNowCount() -> CInt;","highlight_start":1,"highlight_end":37},{"text":"    /// GetNowCountの高精度バージョン","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetNowHiPerformanceCount() -> i64;","highlight_start":1,"highlight_end":49},{"text":"    /// 現在時刻を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetDateTime() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 乱数取得関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 乱数を取得する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_GetRand(rand_max: CInt) -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// 乱数の初期値を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SRand(seed: CInt) -> CInt;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウインドウモード関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウモード・フルスクリーンモードの変更を行う","highlight_start":1,"highlight_end":34},{"text":"    pub fn dx_ChangeWindowMode(flag: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ウインドウのタイトルを変更する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_SetMainWindowText(WindowText: *const CChar) -> CInt;","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウのアイコンを変更する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetWindowIconID(ID: CInt) -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// ウインドウモードの時にウインドウのサイズを自由に変更出来るようにするかどうかを設定する","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_SetWindowSizeChangeEnableFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// ウインドウモードの時のウインドウの大きさと描画画面の大きさの比率を設定する","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetWindowSizeExtendRate(ExRateX: f64, ExRateY: f64) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"    // 通信関係","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 他のマシンに接続する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_ConnectNetWork(IPData: IPDATA, Port: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    /// 接続を終了する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_CloseNetWork(NetHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    /// 接続を受け付けられる状態にする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_PreparationListenNetWork(Port: CInt) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"    /// 接続を受け付けている状態を解除する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_StopListenNetWork() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// データを送信する","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_NetWorkSend(NetHandle: CInt, Buffer: *mut c_void, Length: CInt) -> CInt;","highlight_start":1,"highlight_end":87},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータの量を得る","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_GetNetWorkDataLength() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// 未送信のデータの量を得る","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_GetNetWorkSendDataLength() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータを取得する","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_NetWorkRecv() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// 受信したデータを読み込む、読み込んだデータはバッファから削除されない","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_NetWorkRecvToPeek() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// 新たに確立した接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetNewAcceptNetWork() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// 新たに破棄された接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_GetLostNetWork() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// 接続状態を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetNetWorkAcceptState() -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// 接続先のＩＰアドレスを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetNetWorkIP() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// ＵＤＰを使用して通信するためのソケットを作成する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_MakeUDPSocket() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＵＤＰを使用して通信するためのソケットを削除する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_DeleteUDPSocket() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// ＵＤＰを使用して他のマシンにデータを送信する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_NetWorkSendUDP() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// ＵＤＰを使用して他のマシンからのデータを受信する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_NetWorkRecvUDP() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// ＵＤＰを使用した他のマシンから受信データがあるかどうかを取得する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CheckNetWorkRecvUDP() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ファイル読み込み関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ファイルを開く","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_FileRead_open(FilePath: *mut CChar, ASync: CInt) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"    /// ファイルのサイズを得る","highlight_start":1,"highlight_end":20},{"text":"    //pub fn dx_FileRead_size() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルを閉じる","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_FileRead_close(FileHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ファイルポインタの位置を得る","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_FileRead_tell() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルポインタの位置を変更する","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_FileRead_seek() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルからデータを読み込む","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_FileRead_read(Buffer: *mut c_void, ReadSize: CInt, FileHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"    /// ファイルの終端かどうかを調べる","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_FileRead_eof(FileHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// ファイルから一行読み出す","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_FileRead_gets(Buffer:*mut CChar,Num:CInt,FileHandle:CInt) -> CInt;","highlight_start":1,"highlight_end":83},{"text":"    /// ファイルから一文字読み出す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_FileRead_getc() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ファイルから書式付きデータを読み出す","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_FileRead_scanf() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ドット単位で画像にアクセスしたい関係","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ＣＰＵで扱うイメージの読み込み","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_LoadSoftImage(FileName:*const CChar) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    /// ＣＰＵで扱うイメージの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_LoadARGB8ColorSoftImage(FileName:*const CChar) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    /// ＣＰＵで扱うイメージの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //puFileName:*const CCharb fn dx_LoadXRGB8ColorSoftImage(FileName:*const CChar) -> CInt;","highlight_start":1,"highlight_end":93},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_LoadSoftImageToMem() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadARGB8ColorSoftImageToMem() -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadXRGB8ColorSoftImageToMem() -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ＣＰＵで扱うイメージの作成( RGBA8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeARGB8ColorSoftImage() -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// ＣＰＵで扱うイメージの作成( XRGB8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeXRGB8ColorSoftImage() -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// ＣＰＵで扱うイメージの作成( パレット２５６色 カラー )","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_MakePAL8ColorSoftImage() -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// ＣＰＵで扱うイメージの解放","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_DeleteSoftImage() -> CInt;","highlight_start":1,"highlight_end":43},{"text":"    /// ＣＰＵで扱うイメージを全て解放","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_InitSoftImage() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージのサイズを取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetSoftImageSize() -> CInt;","highlight_start":1,"highlight_end":44},{"text":"    /// ＣＰＵで扱うイメージを指定色で塗りつぶす(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_FillSoftImage() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージのパレットをセットする(各色要素は０～２５５)","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_SetPaletteSoftImage() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージのパレットを取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetPaletteSoftImage() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(パレット画像用、有効値は０～２５５)","highlight_start":1,"highlight_end":52},{"text":"    //pub fn dx_DrawPixelPalCodeSoftImage() -> CInt;","highlight_start":1,"highlight_end":53},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色コードを取得する(パレット画像用、戻り値は０～２５５)","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_GetPixelPalCodeSoftImage() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(各色要素は０～２５５)","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_DrawPixelSoftImage() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色を取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_GetPixelSoftImage() -> CInt;","highlight_start":1,"highlight_end":45},{"text":"    /// ＣＰＵで扱うイメージを別のイメージ上に転送する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_BltSoftImage() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// ＣＰＵで扱うイメージを画面に描画する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_DrawSoftImage() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_CreateGraphFromSoftImage() -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージから分割グラフィックハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_CreateDivGraphFromSoftImage() -> CInt;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 非同期読み込み関係","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 非同期読み込みを行うかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetUseASyncLoadFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// ハンドルが非同期読み込み中かどうかを取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_CheckHandleASyncLoad(Handle: CInt) -> CInt;","highlight_start":1,"highlight_end":58},{"text":"    /// 行っている非同期読み込みの数を取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetASyncLoadNum() -> CInt;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列の引数の文字コードを設定する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUseCharCodeFormat(char_code_format: CInt) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    /// 文字列の先頭の文字のバイト数を取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetCharBytes() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ツールバー","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_SetDisplayMenuFlag(Flag: CInt) -> CInt; // メニューを表示するかどうかをセットする","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetDisplayMenuFlag() -> CInt; // メニューを表示しているかどうかを取得する","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetUseMenuFlag() -> CInt; // メニューを使用しているかどうかを得る","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetAutoMenuDisplayFlag(Flag: CInt) -> CInt; // フルスクリーン時にメニューを自動で表示したり非表示にしたりするかどうかのフラグをセットする","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddToolBarButton(Type: CInt, State: CInt, ImageIndex: CInt, ID: CInt) -> CInt; // ツールバーにボタンを追加する","highlight_start":1,"highlight_end":111},{"text":"    pub fn dx_AddToolBarSep() -> CInt; // ツールバーに隙間を追加する","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetToolBarButtonState(ID: CInt) -> CInt; // ツールバーのボタンの状態を取得する","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetToolBarButtonState(ID: CInt, State: CInt) -> CInt; // ツールバーのボタンの状態を設定するpub fn dx_DeleteAllToolBarButton()->CInt ;// ツールバーのボタンを全て削除する","highlight_start":1,"highlight_end":150},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuItem(","highlight_start":1,"highlight_end":27},{"text":"        AddType: CInt,","highlight_start":1,"highlight_end":23},{"text":"        ItemName: *const CChar,","highlight_start":1,"highlight_end":32},{"text":"        ItemID: CInt,","highlight_start":1,"highlight_end":22},{"text":"        SeparatorFlag: CInt,","highlight_start":1,"highlight_end":29},{"text":"        NewItemName: *const CChar,","highlight_start":1,"highlight_end":35},{"text":"        NewItemID: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt; // メニューに項目を追加する","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItem(ItemName: *const CChar, ItemID: CInt) -> CInt; // メニューから選択項目を削除する","highlight_start":1,"highlight_end":95},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CheckMenuItemSelect(ItemName: *const CChar, ItemID: CInt) -> CInt; // メニューが選択されたかどうかを取得する","highlight_start":1,"highlight_end":104},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemEnable(ItemName: *const CChar, ItemID: CInt, EnableFlag: CInt) -> CInt; // メニューの項目を選択出来るかどうかを設定する","highlight_start":1,"highlight_end":123},{"text":"    pub fn dx_SetMenuItemMark(ItemName: *const CChar, ItemID: CInt, Mark: CInt) -> CInt; // メニューの項目にチェックマークやラジオボタンを表示するかどうかを設定する","highlight_start":1,"highlight_end":129},{"text":"    pub fn dx_SetUseMenuFlag(Flag: CInt) -> CInt; // メニューを有効にするかどうかを設定する","highlight_start":1,"highlight_end":73},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CheckMenuItemSelectAll() -> CInt; // メニューの項目がどれか選択されたかどうかを取得する","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuItem_Name(ParentItemName: *const CChar, NewItemName: *const CChar) -> CInt; // メニューに選択項目を追加する","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuLine_Name(ParentItemName: *const CChar) -> CInt; // メニューのリストに区切り線を追加する","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuItem_Name(ItemName: *const CChar, NewItemName: *const CChar) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に新しい項目を追加する","highlight_start":1,"highlight_end":131},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuLine_Name(ItemName: *const CChar) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に区切り線を追加する","highlight_start":1,"highlight_end":103},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItem_Name(ItemName: *const CChar) -> CInt; // メニューから選択項目を削除する","highlight_start":1,"highlight_end":86},{"text":"    pub fn dx_CheckMenuItemSelect_Name(ItemName: *const CChar) -> CInt; // メニューが選択されたかどうかを取得する","highlight_start":1,"highlight_end":95},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemEnable_Name(ItemName: *const CChar, EnableFlag: CInt) -> CInt; // メニューの項目を選択出来るかどうかを設定する","highlight_start":1,"highlight_end":114},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemMark_Name(ItemName: *const CChar, Mark: CInt) -> CInt; // メニューの項目にチェックマークやラジオボタンを表示するかどうかを設定する","highlight_start":1,"highlight_end":120},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuItem_ID(","highlight_start":1,"highlight_end":30},{"text":"        ParentItemID: CInt,","highlight_start":1,"highlight_end":28},{"text":"        NewItemName: *const CChar,","highlight_start":1,"highlight_end":35},{"text":"        NewItemID: CInt,","highlight_start":1,"highlight_end":25},{"text":"    ) -> CInt; // メニューに選択項目を追加する","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_AddMenuLine_ID(ParentItemID: CInt) -> CInt; // メニューのリストに区切り線を追加する","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuItem_ID(ItemID: CInt, NewItemID: CInt) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に新しい項目を追加する","highlight_start":1,"highlight_end":109},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_InsertMenuLine_ID(ItemID: CInt, NewItemID: CInt) -> CInt; // 指定の項目と、指定の項目の一つ上の項目との間に区切り線を追加する","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItem_ID(ItemID: CInt) -> CInt; // メニューから選択項目を削除する","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_CheckMenuItemSelect_ID(ItemID: CInt) -> CInt; // メニューが選択されたかどうかを取得する","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemEnable_ID(ItemID: CInt, EnableFlag: CInt) -> CInt; // メニューの項目を選択出来るかどうかを設定する","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_SetMenuItemMark_ID(ItemID: CInt, Mark: CInt) -> CInt; // メニューの項目にチェックマークやラジオボタンを表示するかどうかを設定する","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DeleteMenuItemAll() -> CInt; // メニューの全ての選択項目を削除する","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_ClearMenuItemSelect() -> CInt; // メニューが選択されたかどうかの情報をリセット","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetMenuItemID(ItemName: CInt) -> CInt; // メニューの項目名から項目識別番号を取得する","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetMenuItemName(ItemID: CInt, NameBuffer: *mut CChar) -> CInt; // メニューの項目識別番号から項目名を取得する","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_LoadMenuResource(MenuResourceID: CInt) -> CInt; // メニューをリソースから読み込む","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // クリップボード","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // クリップボードに格納されているテキストデータを読み出す","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_GetClipboardText(DestBuffer: *mut CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ログ関係","highlight_start":1,"highlight_end":12},{"text":"    pub fn dx_ErrorLogAdd(ErrorStr: *const CChar) -> CInt; // ログファイル( Log.txt ) に文字列を出力する","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マイナー関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_SetWindowUserCloseEnableFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_GetWindowUserCloseFlag(StateResetFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":68},{"text":"    pub fn dx_SetUseBackBufferTransColorFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"    /// ウインドウがアクティブではない状態でも処理を続行するか、フラグをセットする","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetAlwaysRunFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    /// ログ出力を行うか否かのセット","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetOutApplicationLogValidFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"    /// ＤＸアーカイブファイルの読み込み機能を使うかどうかを設定する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetUseDXArchiveFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// 検索するＤＸアーカイブファイルの拡張子を変更する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_SetDXArchiveExtension(Extension: *const CChar) -> CInt;","highlight_start":1,"highlight_end":72},{"text":"    /// ＤＸアーカイブファイルの鍵文字列を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetDXArchiveKeyString() -> CInt;","highlight_start":1,"highlight_end":49},{"text":"    /// ６４０ｘ４８０の画面で３２０ｘ２４０の画面解像度にするかどうかのフラグをセットする","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_SetEmulation320x240(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":55},{"text":"    /// ３Ｄ機能を使うか、のフラグをセット","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUse3DFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// ScreenFlip関数実行時にＣＲＴの垂直同期信号待ちをするかのフラグセット","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_SetWaitVSyncFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":52},{"text":"    // 　描画の際のブレンドモードを詳細に設定する","highlight_start":1,"highlight_end":29},{"text":"    pub fn SetDrawCustomBlendMode(","highlight_start":1,"highlight_end":35},{"text":"        BlendEnable: CInt,","highlight_start":1,"highlight_end":27},{"text":"        SrcBlendRGB: CInt,","highlight_start":1,"highlight_end":27},{"text":"        DestBlendRGB: CInt,","highlight_start":1,"highlight_end":28},{"text":"        BlendOpRGB: CInt,","highlight_start":1,"highlight_end":26},{"text":"        SrcBlendA: CInt,","highlight_start":1,"highlight_end":25},{"text":"        DestBlendA: CInt,","highlight_start":1,"highlight_end":26},{"text":"        BlendOpA: CInt,","highlight_start":1,"highlight_end":24},{"text":"        BlendParam: CInt,","highlight_start":1,"highlight_end":26},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// 必要ならグラフィックの分割を行うか否かを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetUseDivGraphFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"    /// フォーカスが他のソフトに移っているときにバックグラウンドに表示するグラフィックを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_LoadPauseGraph(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"    /// 裏画面の内容を表画面にコピーする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_ScreenCopy() -> CInt;","highlight_start":1,"highlight_end":36},{"text":"    /// 画面の色ビット数を得る","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_GetColorBitDepth() -> CInt;","highlight_start":1,"highlight_end":42},{"text":"    /// 現在描画対象になっている画面をＢＭＰ形式で保存する","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_SaveDrawScreen(x1: CInt, y1: CInt, x2: CInt, y2: CInt, FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":104},{"text":"    /// 使用可能なフォントの名前を列挙する","highlight_start":1,"highlight_end":26},{"text":"    //pub fn dx_EnumFontName() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    /// 文字列を縦に描画する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_DrawVString() -> CInt;","highlight_start":1,"highlight_end":39},{"text":"    /// フォントハンドルを使用して文字列を縦に描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawVStringToHandle() -> CInt;","highlight_start":1,"highlight_end":47},{"text":"    /// メモリ上の画像ファイルイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CreateGraphFromMem() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// メモリ上の画像ファイルイメージから既存のグラフィックハンドルにデータを転送する","highlight_start":1,"highlight_end":48},{"text":"    //pub fn dx_ReCreateGraphFromMem() -> CInt;","highlight_start":1,"highlight_end":48},{"text":"    /// 画像ファイルから作成したグラフィックハンドルに再度画像ファイルから画像を読み込む","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_ReloadFileGraphAll() -> CInt;","highlight_start":1,"highlight_end":46},{"text":"    /// グラフィックハンドル復元関数を登録する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_SetRestoreGraphCallback() -> CInt;","highlight_start":1,"highlight_end":51},{"text":"    /// 作成する音データの再生形式を設定する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_SetCreateSoundDataType() -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// メモリ上の音ファイルイメージからサウンドハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadSoundMemByMemImage() -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// ＭＩＤＩの演奏形態をセットする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SelectMidiMode(mode: CInt) -> CInt;","highlight_start":1,"highlight_end":50},{"text":"    /// カーソルを点滅させるかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetKeyInputCursorBrinkFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"    /// ドラッグアンドドロップを有効化するかどうか設定する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_SetDragFileValidFlag(Flag: CInt) -> CInt;","highlight_start":1,"highlight_end":56},{"text":"    /// ドラッグアンドドロップされたファイルをひとつ読み出す。","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetDragFilePath(FilePathBuffer: *mut CChar) -> CInt;","highlight_start":1,"highlight_end":67},{"text":"    /// ドラッグアンドドロップされたファイルの数を取得する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_GetDragFileNum() -> CInt;","highlight_start":1,"highlight_end":40},{"text":"    // ウィンドウの見た目を変える","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_SetWindowStyleMode(Mode: CInt) -> CInt;","highlight_start":1,"highlight_end":54},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"not a free function, impl method or static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":367,"byte_end":379,"line_start":14,"line_end":14,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"#[no_mangle]","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_attributes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: attribute should be applied to a free function, impl method or static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:14:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m#[no_mangle]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern \"stdcall\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // 使用必須関数\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ライブラリの初期化\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn dx_SetWindowStyleMode(Mode: CInt) -> CInt;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mnot a free function, impl method or static\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_attributes)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"attribute should be applied to a free function, impl method or static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":63204,"byte_end":63221,"line_start":1334,"line_end":1334,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"extern \"cdecl\" {}","highlight_start":1,"highlight_end":18}],"label":"not a free function, impl method or static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":63190,"byte_end":63202,"line_start":1333,"line_end":1333,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"#[no_mangle]","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: attribute should be applied to a free function, impl method or static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1333:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[no_mangle]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern \"cdecl\" {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mnot a free function, impl method or static\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"attribute should be applied to a free function, impl method or static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":63452,"byte_end":67294,"line_start":1345,"line_end":1439,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    extern \"stdcall\" {","highlight_start":5,"highlight_end":23},{"text":"        pub fn dx_ClearDrawScreen(ClearRect: *mut RECT) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"        pub fn dx_LoadGraph(FileName: *const CChar, NotUse3DFlag: CInt) -> CInt;","highlight_start":1,"highlight_end":81},{"text":"        pub fn dx_PlaySoundFile(FileName: *const CChar, PlayType: CInt) -> CInt;","highlight_start":1,"highlight_end":81},{"text":"        pub fn dx_LoadSoundMem(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"        pub fn dx_DrawString(x: CInt, y: CInt, String: *const CChar, Color: Color) -> CInt;","highlight_start":1,"highlight_end":92},{"text":"        pub fn dx_LoadMusicMem(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"        pub fn dx_MV1LoadModel(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":64},{"text":"        pub fn dx_ChangeFont(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":62},{"text":"        pub fn dx_CreateFontToHandle(","highlight_start":1,"highlight_end":38},{"text":"            FontName: *const CChar,","highlight_start":1,"highlight_end":36},{"text":"            Size: CInt,","highlight_start":1,"highlight_end":24},{"text":"            Thick: CInt,","highlight_start":1,"highlight_end":25},{"text":"            FontType: CInt,","highlight_start":1,"highlight_end":28},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"        pub fn dx_DrawStringToHandle(","highlight_start":1,"highlight_end":38},{"text":"            x: CInt,","highlight_start":1,"highlight_end":21},{"text":"            y: CInt,","highlight_start":1,"highlight_end":21},{"text":"            String: *const CChar,","highlight_start":1,"highlight_end":34},{"text":"            Color: Color,","highlight_start":1,"highlight_end":26},{"text":"            FontHandle: CInt,","highlight_start":1,"highlight_end":30},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"        pub fn dx_LoadFontDataToHandle(FileName: *const CChar, EdgeSize: CInt) -> CInt;","highlight_start":1,"highlight_end":88},{"text":"        pub fn dx_SetDXArchiveExtension(Extension: *const CChar) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_SetDXArchiveKeyString(KeyString: *const CChar) -> CInt;","highlight_start":1,"highlight_end":74},{"text":"        pub fn dx_SaveDrawScreen(","highlight_start":1,"highlight_end":34},{"text":"            x1: CInt,","highlight_start":1,"highlight_end":22},{"text":"            y1: CInt,","highlight_start":1,"highlight_end":22},{"text":"            x2: CInt,","highlight_start":1,"highlight_end":22},{"text":"            y2: CInt,","highlight_start":1,"highlight_end":22},{"text":"            FileName: *const CChar,","highlight_start":1,"highlight_end":36},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"        pub fn dx_SetMainWindowText(WindowText: *const CChar) -> CInt;","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_FileRead_gets(Buffer: *mut CChar, Num: CInt, FileHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":90},{"text":"        pub fn dx_FileRead_open(FilePath: *const CChar, ASync: CInt) -> CInt;","highlight_start":1,"highlight_end":78},{"text":"        pub fn dx_LoadDivGraph(","highlight_start":1,"highlight_end":32},{"text":"            FileName: *const CChar,","highlight_start":1,"highlight_end":36},{"text":"            AllNum: CInt,","highlight_start":1,"highlight_end":26},{"text":"            XNum: CInt,","highlight_start":1,"highlight_end":24},{"text":"            YNum: CInt,","highlight_start":1,"highlight_end":24},{"text":"            XSize: CInt,","highlight_start":1,"highlight_end":25},{"text":"            YSize: CInt,","highlight_start":1,"highlight_end":25},{"text":"            HandleBuf: *mut CInt,","highlight_start":1,"highlight_end":34},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"        pub fn dx_LoadGraphScreen(","highlight_start":1,"highlight_end":35},{"text":"            x: CInt,","highlight_start":1,"highlight_end":21},{"text":"            y: CInt,","highlight_start":1,"highlight_end":21},{"text":"            GraphName: *const CChar,","highlight_start":1,"highlight_end":37},{"text":"            TransFlag: CInt,","highlight_start":1,"highlight_end":29},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"        pub fn dx_GetGraphSize(GrHandle: CInt, SizeXBuf: *mut CInt, SizeYBuf: *mut CInt) -> CInt;","highlight_start":1,"highlight_end":98},{"text":"        pub fn dx_LoadBlendGraph(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"        pub fn dx_GetDateTime(DateBuf: *mut DATEDATA) -> CInt;","highlight_start":1,"highlight_end":63},{"text":"        pub fn dx_GetDrawStringWidth(String: *const CChar, StrLen: CInt) -> CInt;","highlight_start":1,"highlight_end":82},{"text":"        pub fn dx_GetDrawStringWidthToHandle(","highlight_start":1,"highlight_end":46},{"text":"            String: *const CChar,","highlight_start":1,"highlight_end":34},{"text":"            StrLen: CInt,","highlight_start":1,"highlight_end":26},{"text":"            FontHandle: CInt,","highlight_start":1,"highlight_end":30},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_GetFontStateToHandle(","highlight_start":1,"highlight_end":40},{"text":"            FontName: *const CChar,","highlight_start":1,"highlight_end":36},{"text":"            Size: *mut CInt,","highlight_start":1,"highlight_end":29},{"text":"            Thick: *mut CInt,","highlight_start":1,"highlight_end":30},{"text":"            FontHandle: CInt,","highlight_start":1,"highlight_end":30},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_GetScreenState(","highlight_start":1,"highlight_end":34},{"text":"            SizeX: *mut CInt,","highlight_start":1,"highlight_end":30},{"text":"            SizeY: *mut CInt,","highlight_start":1,"highlight_end":30},{"text":"            ColorBitDepth: *mut CInt,","highlight_start":1,"highlight_end":38},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"        pub fn dx_PlayMovie(FileName: *const CChar, ExRate: CInt, PlayType: CInt) -> CInt;","highlight_start":1,"highlight_end":91},{"text":"        pub fn dx_LoadMask(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":60},{"text":"        pub fn dx_LoadDivMask(","highlight_start":1,"highlight_end":31},{"text":"            FileName: *const CChar,","highlight_start":1,"highlight_end":36},{"text":"            AllNum: CInt,","highlight_start":1,"highlight_end":26},{"text":"            XNum: CInt,","highlight_start":1,"highlight_end":24},{"text":"            YNum: CInt,","highlight_start":1,"highlight_end":24},{"text":"            XSize: CInt,","highlight_start":1,"highlight_end":25},{"text":"            YSize: CInt,","highlight_start":1,"highlight_end":25},{"text":"            HandleBuf: *mut CInt,","highlight_start":1,"highlight_end":34},{"text":"        ) -> CInt;","highlight_start":1,"highlight_end":19},{"text":"        pub fn dx_GetMaskSize(WidthBuf: *mut CInt, HeightBuf: *mut CInt, MaskHandle: CInt) -> CInt;","highlight_start":1,"highlight_end":100},{"text":"        pub fn dx_GetMousePoint(XBuf: *mut CInt, YBuf: *mut CInt) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"        pub fn dx_PlayMusic(FileName: *const CChar, PlayType: CInt) -> CInt;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_LoadPauseGraph(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":66},{"text":"        pub fn dx_LoadSoftImage(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":65},{"text":"        pub fn dx_LoadARGB8ColorSoftImage(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"        pub fn dx_LoadXRGB8ColorSoftImage(FileName: *const CChar) -> CInt;","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a free function, impl method or static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":63434,"byte_end":63446,"line_start":1344,"line_end":1344,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: attribute should be applied to a free function, impl method or static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1344:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extern \"stdcall\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn dx_ClearDrawScreen(ClearRect: *mut RECT) -> CInt;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn dx_LoadGraph(FileName: *const CChar, NotUse3DFlag: CInt) -> CInt;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn dx_PlaySoundFile(FileName: *const CChar, PlayType: CInt) -> CInt;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mnot a free function, impl method or static\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `dx_FileRead_gets` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":64939,"byte_end":64955,"line_start":1380,"line_end":1380,"column_start":16,"column_end":32,"is_primary":true,"text":[{"text":"        pub fn dx_FileRead_gets(Buffer: *mut CChar, Num: CInt, FileHandle: CInt) -> CInt;","highlight_start":16,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: function `dx_FileRead_gets` is never used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1380:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn dx_FileRead_gets(Buffer: *mut CChar, Num: CInt, FileHandle: CInt) -> CInt;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"19 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 19 warnings emitted\u001b[0m\n\n"}
